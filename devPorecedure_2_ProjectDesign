### 4.1 프로젝트 구성 지침
1. **개발환경 결정**  
   - IDE, 에디터, OS, 프레임워크 버전, 빌드 도구(Maven/Gradle/npm 등)  
2. **프로젝트 아키텍처 결정**  
   - 느슨한 결합(Loose Coupling) : 모듈 간 직접적인 의존성 대신 이벤트/메시지 기반 통신
   - 높은 응집성(High Cohesion) : 각 모듈은 명확한 단일 책임 원칙 준수
   - 확장 가능성 : 수평적 확장이 가능은 stateless 설계
   - 장애 격리 : 한 모듈의 장애가 전체 시스템에 영향을 주지 않도록 설계
3. **모듈 간 통신 설계**
   - 비동기 메시징 : Kafka/RabbitMQ를 통한 이벤트 기반 통신
   - API Gateway : 외부 요청을 위한 단일 진입점(선택사항)
4. **관련 라이브러리, DB, API 결정**  
   - 예) Spring Boot, React, MySQL, Redis, 외부 결제 API 등  
   - 빌드/패키지 도구 설정(Maven, Gradle 등)  
5. 데이터 흐름 표준화
   - 입력 : 표준화된 메시지 포맷(JSON Schema)
   - 처리 : 각 모듈은 독립적으로 처리 후 결과 이벤트 발생
   - 출력 : 다음 모듈이 소비할 수 있는 표준 이벤트

### 4.2 시나리오별 단위 개발
#### 4.2.1 우선순위 결정
- 우선순위가 높은 유즈케이스(시나리오)부터 **개발 브랜치**를 생성하여 진행  
- 스프린트 또는 칸반 보드를 통해 개발 단계를 시각적으로 관리  

#### 4.2.2 설계 및 모델링
1. **UI/UX 설계**  
   - 와이어프레임, 프로토타입, 사용자 플로우 등  
2. **데이터 모델 설계**  
   - 데이터베이스 스키마, 테이블 구조, 엔티티(객체) 관계 설정  
3. **업무 로직 설계**  
   - 유즈케이스별 프로세스, 비즈니스 규칙, 예외 상황 처리  
4. **UML 다이어그램 작성(필요 시)**  
   - 클래스 다이어그램, 시퀀스 다이어그램, 활동 다이어그램 등  
