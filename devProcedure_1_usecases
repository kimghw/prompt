1. 유즈 시나리오(도메인 서비스) 작성 방법
  1.1 작성 방법
  - Transaction, Async, Reuse, Recovery, Security 중 2개 이상이면 유즈케이스
  - 재사용 가능성이 거의 없다면, 별도 유즈케이스로 분리할 필요가 없을 수도 있으나 시나리오가 복잡하면 분리를 고려
  - 순수하게 비즈니스 로직
  - 사용자의 입장에서 하나의 목표인가? 동기인가? : 단일 유지케이스
  -- 회원가입, 인증, 이메일 인덱싱, 데이터 로드, 파싱, 데이터 임베딩 등 이며 여러개를 하나로 묶을 수 있음
  - 트랜잭션, API호출, 비동기, 웹훅 방식이 포함되어 있는가? : 유지 케이스를 분리
  -- 예) [계정을 생성-> 내부 데이터베이스 저장]-> [인증 API 호출] -> [실패/처리/로깅]-> [토큰 수신-> 데이터베이스 저장]
                시나리오A                     시나리오B 또는 함수                         시나리오3
  1.2 컴포짓 유즈케이스 관리 방법
   - 최상위 시나라오에 대한 간단 몇세 + 단계별 하위 유즈케이스 연결
   - 하위 유즈케이스는 '단독 실행' 여부, '재사용' 가능성 고려
  
    1.3 단순 기능
    - 포트나 함수로 구현
    - 단순 CRUD는 유즈케이스에서 제외(여러 CRUD가 연결되어 복잡한 경우 유즈케이스 고려)
    - 단순 호출/데이터변환/필터링은 유즈케이스보다는 서비스단으로 구현하거나 함수 레벨로 분리 권장
1.4 유즈케이스 분할/통합 기준
 - 유즈케이스의 목표 명확화
 - 트랜잭션 보장 범위 결정


2. 유즈케이스 문서화 시 상세/요약 작성
2.1. 요약문서
    - 전체 유즈케이스들의 이름과 목적, 주요 액터, 입력/출력 정도만 간단히 나열하여 “큰 그림”
 - 어떤 유즈케이스가 트랜잭션성을 갖고, 어떤 유즈케이스가 외부 API(혹은 비동기)와 연동되는지 한눈에 파악
2.2 상세 문서
   -- 각 유즈케이스별로 “시나리오 플로우(순서도), 예외 처리, 트랜잭션 범위, 롤백(Recovery) 전략” 등을 기술
   -- 이때, “기능 요구사항”과 “설계 클래스/메서드”를 분리해서 관리하는 것이 좋습니다.
               예: 기능 문서(기획 단계)와 설계 문서(개발 단계)로 분리
2.3 기본 정보
 -- 유즈케이스 명, 설명 액터, 관련 요구사항(사용자 관련 요구사항)
2.4 흐름 정의
  2.4.1 메인 시나리오
     - 유즈케이스가 정상적으로 실행될 때의 기본 절차를 단계별로 기술
   2.4.2 대안 흐름
      - 메인 흐름과 다른 조건/분기(에러,예외, 보조 기능 등)가 발생하는 시나리오
2.4.3 예외 흐름



3. 외부 시스템
  3.1 데이터베이스, 이메일, API 는 아웃바운드 Port/Adapter로 분리

