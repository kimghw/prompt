# IACS 문서 구조화 지침서 (버전 3.1, 2025-01-20)

> **주요 변경사항**
> - Annex/Appendix를 UR 내부 부록으로 명확히 정의
> - 특이 형식 보고 절차 추가
> - 프로그래밍 언어 특정 내용 제거
> - 실무 중심 지침으로 재구성

---

## 1. 개요

### 1.1 목적

본 지침서는 **IACS** (International Association of Classification Societies) 기술 문서를 PDF 원본으로부터 **구조화된 JSON 데이터**로 변환할 때 필요한 표준 절차와 형식을 정의한다.

### 1.2 적용 범위

* **IACS 정식 발간물**: UR (Unified Requirements), PR (Procedural Requirements), UI (Unified Interpretations)
* **문서 내 부록**: Annex
* **특수 구조**: 양식(Form), 리포트 템플릿, Sheet 기반 문서

### 1.3 기본 원칙

1. **계층 구조 보존**: 원문의 절/항 체계 유지
2. **기본 단위** : 1, 2, 3.. ANNEX, Table 이하 section  단위로 사용 
2.1 ** 주위 ** : 제목이 Table 인 경우랑 데이터 테이블 이랑 구분 필요요
3. **문서 ID** : A, B, C...A1, A2 를 문서 ID/document_id 
4. **토큰 기반 분할**: 750 토큰 초과 시 적절한 단위로 분할
5. **테이블 타입 구분**: 용도와 형식에 따라 명확히 분류
6. **특이 형식 보고**: 예상치 못한 형식은 우선 보고 후 처리
7. **참조 무결성**: 모든 ID는 고유하며 상호 참조 가능
8. **출력 양식**: Markdown
9. **문서 간 교차 참조**: 객체형 배열로 표현

### 1.4 분할 원칙
1. ** 분할 단위** : 섹션단위로 분할, 하위 섹션 포함
2. ** 섹션 750 토큰 초과 시** : 하위섹션 분리
3. ** 분리 컨텐츠** : 데이터 테이블, 그림, appendix, 특이 형식의 별도 json 생성
4. *# 스플릿 ** : 센션 분리 시 최하위 세션은 완전체로 구성, 최하위 세션은 분리하지 않

### 1.5 토큰 계산
1. **토크나이저**: `tiktoken.get_encoding("cl100k_base")` 권장
2. **경계**:

   * `total_token_count ≤ 750` → 분할 안 함
   * `> 750` → `400 – 500` token 단위, **문단 경계**에서 컷
3. **스플릿 번호**: `split_no`(1…n) + `split_total` 동시 기록
4. **분할 후 검증**: 각 스플릿의 `total_token_count` 재계산 → 500 token ± 50 허용
5. **subsections의 token_count**: 해당 서브섹션의 대략적인 크기 표시
6. **total_token_count**: 현재 JSON 객체의 content 필드에 실제 포함된 텍스트의 토큰 수

### 1.6 추출단위
- **문서 타입**: UR, PR, UI
- **문서 번호**: 예) UR G1, UR G2, UR G3, UR Z15 등)
- **적용 범위**:
- **본문 상위 절**: 1. General, 2. Definitions, 3. Requirements, ANNEX 등
- **계층**: 콘텐츠가 몇 번째 서브 섹션인지 기록
- **메인텍스트 범위** : 동일 hierarchy 만 포함, 그 외에는 다른 메인텍스트 사용
- **추가 분리**: 기본 단위 절이 750토큰 초과 시 500토큰 단위로 분리, 계층 분리 시 같은 하위 섹션만 객체 구성
- **분리 시 ID**: split_no 작성
- **상위 절 명시**: parent_id 작성
- **포함 내용**: 해당 절의 모든 하위 절 내용
- **sheet 분리** : sheet 는 별도 객체 분리리

## 2. 특이 형식 보고 절차

### 2.1 보고가 필요한 경우

다음과 같은 경우 즉시 보고하고 처리 방침을 협의한다:

| 상황 | 예시 | 보고 내용 |
|------|------|-----------|
| **예상치 못한 구조** | • 다단 중첩 테이블<br>• 그림 내 삽입된 테이블<br>• 페이지 걸친 복잡한 양식 | 구조 스크린샷, 페이지 번호, 예상 데이터 량 |
| **새로운 테이블 타입** | • 체크리스트와 설명이 혼재<br>• 플로우차트 형태의 테이블 | 테이블 제목, 용도, 구성 요소 |
| **비표준 참조 체계** | • 로마숫자와 아라비아 숫자 혼용<br>• 알파벳 서브섹션 (a, b, c) | 참조 패턴, 출현 빈도 |
| **특수 콘텐츠** | • 수식 블록<br>• 코드 샘플<br>• 특수 기호/다이어그램 | 콘텐츠 타입, 처리 가능 여부 |

### 2.2 보고 형식

```
[특이 형식 보고]
문서: UR_Z10.1
위치: Table VIII (36-38페이지)
형식: 테이블 제목이지만 3페이지 분량의 구조화된 텍스트
특징: 
- 1. General, 2. Extent of survey 등 명확한 섹션 구조
- 총 1500 토큰 이상의 텍스트
- 실제 표 형태가 아닌 문서 형태
제안: composite_content 타입으로 처리, 하위 섹션별 분리
```

---

## 3. 문서 구조화 절차

### 3.1 전체 프로세스

| 단계 | 작업 내용 | 주의사항 |
|------|-----------|----------|
| **1. 사전 검토** | • 문서 전체 구조 파악<br>• 특이 형식 식별 및 보고<br>• 처리 방침 확정 | 새로운 형식 발견 시 즉시 중단하고 보고 |
| **2. 구조 분석** | • 목차 기반 계층 추출<br>• 테이블/그림 위치 매핑<br>• Annex/Appendix 구분 | Annex는 UR의 센션으로 간주 |
| **3. 콘텐츠 분류** | • 섹션별 텍스트 추출<br>• 테이블 타입 판별<br>• 토큰 수 계산 | 복합 콘텐츠 테이블 주의 |
| **4. 구조화** | • JSON 객체 생성<br>• ID 부여 및 링크 설정<br>• 분할 처리 (필요시) | ID 명명 규칙 엄격 준수 |
| **5. 검증** | • 스키마 적합성<br>• 참조 무결성<br>• 토큰 수 재확인 | 모든 cross-reference 확인 |

### 3.2 테이블 타입 판별 기준

```
판별 순서:
1. 제목에 "Report", "Form", "Inspection" 포함 → form_table
2. 페이지 이상의 텍스트 콘텐츠 → composite_content 검토
3. Sheet 내 리포트 코드(TM1-T 등) → report_table
4. 일반 데이터 → data_table
```

---

## 4. JSON 스키마 정의

### 4.1 주요 객체 타입

#### 4.1.1 섹션 객체 (기본)
```jsonc
{
  "document_type": "UR | PR | UI |
  "document_id": "UR_G1", # UR_G1.1
  "document_title": "Vessels with cargo containment system for liquefied gas",
  "doc_version": "Rev.3",
  "revision_date": "2023-07-01",
  "sheet" : 없으면 null, 있으면 기록
  "implementation_date": "2024-01-01",
  "applicable_to": "LNG carriers",           "적용 대상 선박/시스템 , 없으면 not defiend"
  "parent_id": null,                // 최상위면 null , 1, 2, 3,.. Annex etc.,
  "section_id": "UR_G1-3.2",
  "hierarchy_no": "3",  # section_id : hierachy_no, 1 : 1, 1.1, 1.2: 2, 1.2.1, 1.2.2 : 3, Table I, ANNEX 2
  "split_no": 1,
  "split_total": 2,
  "section_title": "Pressure Testing Requirements",
  "subsections": [
    { "id": "3.2.1", "title": "Scope", "token_count": 120 },
    { "id": "3.2.2", "title": "Procedure", "token_count": 380 }
    { "Table I": "3.2.2", "title": "Procedure", "token_count": 380 }
  ],
  "last_subsection_id" : 3.2.2.3 # 가장 마지막 서브 섹션 번호
  "total_token_count": 820,
  "related_tables": ["UR_G1-3.2_Table[no]"], # 데이터 테이블
  "related_notes": ["UR_G1-3.2_Note[no]"],
  "related_figures": ["UR_G1-3.2_Fig001"],
  "related_appendices": ["UR_G1_Appx1"],
  "cross_references": [
    { "document": "UR", "content_no": "UR_Z15-4.1" },
    { "document": "IGC", "content_no": "4.13.2" }
  ],
  "content_format": "markdown",
  "language": "eng",
  "content": "### 3.2 Pressure Testing Requirements\n\n1. All pressure‑containing parts..."  #markdown
}
```

#### 4.1.2 테이블 객체 (타입별)

**Type 1: 데이터 테이블**
```jsonc
{
  "table_id": "document_id_section(소속된)_Table_I",
  "table_type": "data_table",
  "document_id": "UR_G1",
  "title": "Minimum Pressure Test Values",
  "section_reference": "UR_G1-3.2",
  "caption": "Minimum requirements to Close-up Surveys",
  "content": "표준 마크다운 테이블"
}
```
```
### 4.2 필드 설명
#### 3.2.1 필수 필드Add commentMore actions
- **document_type**: 문서 유형 (UR/PR/UI)
- **document_id**: 문서 고유 식별자
- **section_id**: 관련/소속 절 번호
- **section_title**: 절 제목
- **parent_id**: 상위 섹션 ID - appendix 의 parrent_id 는 Annex, Annex의 parrent_id는 null
- **total_token_count**: 해당 절의 총 토큰 수
- **content_format**: "markdown" (고정값)
- **content**: Markdown 형식의 절 내용

#### 3.2.2 선택 필드
- **split_no**: 분리 번호 (분할된 경우)
- **related_tables**: 관련 테이블 ID 배열
- **related_notes**: 관련 노트/풋노트 ID 배열
- **related_figures**: 관련 그림 ID 배열
- **related_annexes**: 관련 부록 ID 배열
- **related_sessions**: 관련 부록 ID 배열
- **cross_references**: 다른 문서 참조

## 5. 복합 콘텐츠 처리 지침

### 5.1 처리 기준

| 토큰 수 | 처리 방법 | 설명 |
|---------|-----------|------|
| < 200 | 단일 객체 유지 | table 객체의 content 필드에 전체 포함 |
| 200-750 | 단일 링크 섹션 | 하나의 linked section 생성 |
| > 750 | 다중 링크 섹션 | 논리적 구조(1., 2. 등)로 분할 |

### 5.2 처리 예시

```
원본: Table VIII - SURVEY REPORTING PRINCIPLES (3페이지)
처리:
1. 메인 테이블 객체 생성 (메타데이터만)
2. "1. General" → linked section 1 (650 토큰)
3. "2. Extent of survey" → linked section 2 (850 토큰)
4. 메인 객체에 linked_sections 배열로 연결
```

---

## 6. Sheet 구조 처리 (Annex II 예시)

### 6.1 Sheet 기반 문서 구조

```
Annex II 구조:
- Sheet 1: Contents (목차)
- Sheet 2: Instructions (지침)
- Sheet 3: General Particulars (일반사항 양식)
- Sheets 4-10: Reports (TM1-T ~ TM6-T)
- Sheets 11-15: Guidance (안내 다이어그램)
```

### 6.2 처리 방법

1. 각 Sheet를 독립 객체로 생성
2. Sheet 타입 구분 (instruction, form, report, guidance)
3. Report 양식은 코드(TM1-T 등) 포함
4. 관련 Sheet 간 상호 참조 설정

---

## 7. ID 명명 규칙

### 7.1 기본 규칙

| 구분           | 규칙                     | 예시                                |
| ------------ | ---------------------- | --------------------------------- |
| **문서 ID**    | `UR_<카테고리><번호>`        | `UR_G1`                           |
| **섹션 ID**    | `<문서ID>-<절번호>`         | `UR_G1-1.2.1`                     |
| **스플릿 ID**   | 섹션 ID + `split_no`     | `UR_G1-1.2.1-split1` *(사용자 필요 시)* |
| **테이블**      | `<섹션ID>_Table<n>`      | `UR_G1-3.2_Table1`                |
| **노트**       | `<섹션ID>_Note<n>` | `UR_G1-3.2_Note1`               |
| **그림**       | `<섹션ID>_Fig<n>`  | `UR_G1-3.2_Fig1`                |
| **Appendix** | `<문서ID>_Appx<n>+ section_id`       | `UR_G1_Appx1`                     |
| **Annex**    | `<문서ID>_Annex_<ID>`    | `UR_G1_Annex_A`                   |
| 링크 섹션 | `<테이블ID>-<번호>` | `UR_Z10.1-Table_VIII-1` |
| Sheet | `<Annex_ID>-Sheet_<번호>` | `UR_Z10.1-Annex_II-Sheet_4` |

> **원칙** : 가장 **구체적인 섹션 번호**를 포함하고, 문서 전체 범위에 걸치면 최상위 ID 사용.

## 8. 특수 케이스

### 8.1 다중 칼럼 PDF

`LayoutParser` → 칼럼별 bbox 정렬 → 독립 추출 → 순서대로 병합.

### 8.2 복잡한 테이블

* 셀 병합 해제 후 **열 ≤ 10 · 행 ≤ 30** 단위로 분할
* 초과 시 다단 테이블로 **Table ID 연번** 부여

### 8.3 Annex / Appendix

* **Annex**: 본문 상위 절과 동등, `parent_id = null`, 자체 JSON 생성
* **Appendix**: Annex 하위 문서, `parent_id = <Annex_id>`, `appendix_id` 규칙 적용

---

