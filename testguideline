# 클린 아키텍처 기반 테스트 지침

## 1. 전체 테스트 전략 개요

1. **단위 테스트(Unit Test) 우선**

   * 엔티티, 유즈케이스, 어댑터/포트 로직을 **외부 의존성(DB, 네트워크 등) 없이** 빠른 피드백으로 검증
   * **Mock, Stub, Fake** 등을 **최소한**으로 활용하여 **순수 비즈니스 로직**에 집중

2. **통합 테스트(Integration Test) 보완**

   * 실제 **DB**나 **외부 API 연동** 여부, **전체 시나리오 흐름** 검증
   * 인프라 종속적인 부분(트랜잭션, DB 스키마, API 계약 등) 테스트
   * **TestContainer**, **In-memory DB**, **Mock 서버** 등을 사용해 실제 환경과 유사한 조건에서 실행

3. **중복 최소화**

   * **단위 테스트**에서 이미 검증한 비즈니스 로직을 **통합 테스트**에서 과도하게 반복하지 않음
   * 통합 테스트는 “각 계층 간 연동 및 I/O”에 초점

4. **테스트 피라미드**

   * **단위 테스트**: 많고, 빠르게
   * **통합 테스트**: 상대적으로 적고, 필요한 **주요 시나리오 중심**
   * **E2E/UI 테스트**: 시스템 전체 흐름 확인용(필요 시 최소화)

---

## 2. 단위 테스트 지침

### 2.1 엔티티(Entity) 테스트

* **목표**

  * **도메인 비즈니스 규칙** 무결성 보장
  * 엔티티 생성, 상태 전이, 값 검증, 도메인 이벤트 처리 등

* **원칙**

  1. **외부 의존성 완전 차단**

     * DB 등 인프라 없이 **순수 객체 연산**만 확인
  2. **도메인 규칙 충분 검증**

     * 정상 시나리오(Valid), 예외 시나리오(Invalid) 모두 커버
  3. **Test Fixture**

     * 테스트에 필요한 **더미 데이터**나 **객체**를 간결하고 명확하게 작성

* **예시 시나리오**

  * 예)

    ```text
    주문 엔티티 생성 시, 품목 가격 합계가 정확한지 검증  
    재고가 부족하면 예외 발생 여부 확인  
    ```

---

### 2.2 유즈케이스(Use Case) 테스트

* **목표**

  * 유즈케이스(비즈니스 로직 흐름) 검증
  * **입력값 유효성**, **엔티티 조작**, **예외 처리**, **결과 반환** 등

* **원칙**

  1. **Mock / Stub / Fake Repository 활용**

     * 유즈케이스가 필요로 하는 \*\*포트(Repository, 외부 API 등)\*\*는 Mock/Stub로 대체
     * **비즈니스 로직** 검증에만 집중
  2. **시나리오 중심**

     * 정상 플로우 + 예외 플로우(에러, 예외 케이스)
  3. **Output 검증**

     * 최종 결과(반환 DTO 등)가 요구사항대로 생성되는지 확인

* **예시 시나리오**

  * 예)

    ```text
    주문 생성 유즈케이스:  
      - 입력 값(고객 정보, 상품 목록)이 정상일 때 DB 저장 모의 호출  
      - 재고 부족 시 예외 발생 여부 확인  
      - 결과 DTO 검증
    ```

---

### 2.3 어댑터(Adapter)/포트(Port) 테스트

* **목표**

  * 외부 연동을 위한 **데이터 매핑/변환/유효성 체크 로직** 검증
  * 어댑터 자체의 **파싱, DTO 변환, 에러 핸들링** 등

* **원칙**

  1. **포트 인터페이스에 대한 Mock**

     * 실제 DB/외부 API 호출 대신 **Mock 응답/예외**를 주어 **Adapter의 예외 처리** 로직 테스트
  2. **간단한 단위 검증**

     * **DTO ↔ 엔티티 변환**이 정상 동작하는지 확인
  3. **주요 에러 시나리오**

     * **응답 형식 오류**, **필드 누락**, **타임아웃** 시 재시도 로직 등

* **예시 시나리오**

  * 예)

    ```text
    REST API 어댑터:  
      - 받은 JSON을 도메인 엔티티로 변환 시 필드 누락 예외 발생 여부  
      - 유효성 검사 로직 등
    ```

---

## 3. 통합 테스트 지침

### 3.1 범위 설정

* **유즈케이스 ↔ 실제 어댑터 ↔ 실제 인프라(DB, 외부 API 등)**
* 또는 DB/외부 API를 제외하되, 앱 레벨에서 **Adapter – Use Case – Entity** 간의 실제 호출 흐름을 검증

### 3.2 시나리오 중심 접근

* **정상 시나리오**

  * DB에 정상적으로 저장 후, 조회나 후속 처리가 제대로 되는지 검증
* **예외 시나리오**

  * DB 제약조건 충돌(Unique Key 등), 외부 API 다운, 응답 지연, 네트워크 에러 등
  * 트랜잭션 롤백이 필요한 경우 그 동작 여부 확인

### 3.3 테스트 환경

1. **TestContainer / Docker 기반 DB**

   * 실제 DB와 **동일한 환경**에서 테스트 가능
   * 실행 속도는 느려지지만, 인프라 이슈를 **조기에 발견** 가능

2. **In-memory DB(H2 등)**

   * 빠른 실행 가능
   * 실제 DB와 차이가 생길 수 있으므로 **스키마 호환성** 확인

3. **Mock 서버**

   * 외부 API가 필요할 경우, [WireMock](http://wiremock.org/) 등으로 성공/실패 응답 시나리오를 미리 세팅하여 테스트

### 3.4 데이터 준비 및 정리

* **픽스처(Fixture)**

  * 테스트에 필요한 초기 데이터 준비(예: 계정, 상품, 설정값 등)
* **테스트 간 격리**

  * 테스트 시작/종료 시 DB 초기화(`TRUNCATE` 등)
  * 실행 순서에 따라 서로 영향을 주지 않도록 주의

### 3.5 계약(Contract) 테스트(선택)

* **외부 API 연동이 많거나, API 스펙 변경 위험이 큰 경우**

  * **Consumer-Driven Contract(Ex. Pact)** 방식 권장
  * 소비자(클라이언트)와 제공자(서버) 간의 **요청/응답 규격**을 미리 정의하고, 자동화 테스트로 검증

---

## 4. 운영 및 주의 사항

1. **CI/CD 파이프라인 내 자동화**

   * **단위 테스트**: Pull Request 등에서 **자주 실행** → 빠른 피드백
   * **통합 테스트**: PR Merge나 배포 전 등 주기적으로 실행 → 인프라 종속적 오류 조기 발견

2. **Mock 남용 주의**

   * Mock은 필요한 만큼만 사용, **구현 세부사항에 과도하게 의존**하지 않도록 설계
   * 가능한 **In-memory / Fake** 구현을 통해 **실제 로직**을 테스트하는 편이 유지보수에 유리

3. **테스트 이름 & 구조 명확화**

   * **Given-When-Then** 패턴, **Arrange-Act-Assert** 패턴 등 사용해 테스트 가독성 향상
   * 소스 코드 구조(패키지, 모듈)와 테스트 코드 구조를 **일치**시켜 유지보수 편의성 확보

4. **회귀 테스트(Regression Test) 강화**

   * 새로운 기능 도입, 리팩토링 시 **기존 단위/통합 테스트가 깨지지 않는지** 확인
   * 기존 테스트 케이스를 **충실 유지** 및 **커버리지 보완**

5. **테스트 커버리지 목표 설정**

   * **비즈니스 로직**(엔티티, 유즈케이스)은 높은 커버리지(80\~90% 이상) 권장
   * **어댑터** 등 I/O 중심 모듈은 핵심 예외, 변환 로직 위주로 커버
   * \*\*무조건 100%\*\*는 비합리적일 수 있으니 **중요도**에 따라 우선순위 부여

---

## 5. 결론

* **엔티티(Entity)** → **유즈케이스(Use Case)** → **어댑터(Adapter/Port)** 순으로 **단위 테스트**를 촘촘히 작성
* **유즈케이스 \~ 어댑터 \~ 실제 인프라**와 연동하는 **통합 테스트**로 주요 시나리오 검증
* **Mock**과 **실제 환경**을 적절히 사용해 **테스트 피라미드**를 구성하면, 유지보수성과 신뢰도를 동시에 확보

이 지침을 기반으로, 기능 추가나 변경 시
**단위 테스트 → 통합 테스트 → (필요 시) 계약 테스트**를 순차적으로 진행하면
클린 아키텍처 원칙에 맞춰 **안정적으로** 비즈니스 로직과 외부 연동을 **검증**할 수 있습니다.
