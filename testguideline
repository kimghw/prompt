````markdown
# 클린 아키텍처 기반 테스트 지침

## 1. 전체 테스트 전략 개요

1. **단위 테스트(Unit Test) 우선**
   - 엔티티, 유즈케이스, 어댑터/포트 로직을 **외부 의존성(DB, 네트워크 등) 없이** 빠른 피드백으로 검증  
   - **Mock, Stub, Fake** 등을 **최소한**으로 활용하여 **순수 비즈니스 로직**에 집중  

2. **통합 테스트(Integration Test) 보완**
   - 실제 **DB**나 **외부 API 연동** 여부, **전체 시나리오 흐름** 검증  
   - 인프라 종속적인 부분(트랜잭션, DB 스키마, API 계약 등) 테스트  
   - **TestContainer**, **In-memory DB**, **Mock 서버** 등을 사용해 실제 환경과 유사한 조건에서 실행  

3. **중복 최소화**
   - **단위 테스트**에서 이미 검증한 비즈니스 로직을 **통합 테스트**에서 과도하게 반복하지 않음  
   - 통합 테스트는 “각 계층 간 연동 및 I/O”에 초점  

4. **테스트 피라미드**
   - **단위 테스트**: 많고, 빠르게  
   - **통합 테스트**: 상대적으로 적고, 필요한 **주요 시나리오 중심**  
   - **E2E/UI 테스트**: 시스템 전체 흐름 확인용(필요 시 최소화)

---

## 2. 단위 테스트 지침

### 2.1 엔티티(Entity) 테스트

- **목표**  
  - **도메인 비즈니스 규칙** 무결성 보장  
  - 엔티티 생성, 상태 전이, 값 검증, 도메인 이벤트 처리 등

- **원칙**  
  1. **외부 의존성 완전 차단**  
     - DB 등 인프라 없이 **순수 객체 연산**만 확인  
  2. **도메인 규칙 충분 검증**  
     - 정상 시나리오(Valid), 예외 시나리오(Invalid) 모두 커버  
  3. **Test Fixture**  
     - 테스트에 필요한 **더미 데이터**나 **객체**를 간결하고 명확하게 작성

- **예시 시나리오**  
  ```text
  주문 엔티티 생성 시, 품목 가격 합계가 정확한지 검증  
  재고가 부족하면 예외 발생 여부 확인  
````

---

### 2.2 유즈케이스(Use Case) 테스트

* **목표**

  * 유즈케이스(비즈니스 로직 흐름) 검증
  * **입력값 유효성**, **엔티티 조작**, **예외 처리**, **결과 반환** 등

* **원칙**

  1. **Mock / Stub / Fake Repository 활용**

     * 유즈케이스가 필요로 하는 \*\*포트(Repository, 외부 API 등)\*\*는 Mock/Stub로 대체
     * **비즈니스 로직** 검증에만 집중
  2. **시나리오 중심**

     * 정상 플로우 + 예외 플로우(에러, 예외 케이스)
  3. **Output 검증**

     * 최종 결과(반환 DTO 등)가 요구사항대로 생성되는지 확인

* **예시 시나리오**

  ```text
  주문 생성 유즈케이스:
    - 입력 값(고객 정보, 상품 목록)이 정상일 때 DB 저장 모의 호출
    - 재고 부족 시 예외 발생 여부 확인
    - 결과 DTO 검증
  ```

---

### 2.3 어댑터(Adapter)/포트(Port) 테스트

* **목표**

  * 외부 연동을 위한 **데이터 매핑/변환/유효성 체크 로직** 검증
  * 어댑터 자체의 **파싱, DTO 변환, 에러 핸들링** 등

* **원칙**

  1. **포트 인터페이스에 대한 Mock**

     * 실제 DB/외부 API 호출 대신 **Mock 응답/예외**를 주어 **Adapter의 예외 처리** 로직 테스트
  2. **간단한 단위 검증**

     * **DTO ↔ 엔티티 변환**이 정상 동작하는지 확인
  3. **주요 에러 시나리오**

     * **응답 형식 오류**, **필드 누락**, **타임아웃** 시 재시도 로직 등

* **예시 시나리오**

  ```text
  REST API 어댑터:
    - 받은 JSON을 도메인 엔티티로 변환 시 필드 누락 예외 발생 여부
    - 유효성 검사 로직 등
  ```

---

## 3. 통합 테스트 지침

### 3.1 범위 설정

* **유즈케이스 ↔ 실제 어댑터 ↔ 실제 인프라(DB, 외부 API 등)**
* 또는 DB/외부 API를 제외하되, 앱 레벨에서 **Adapter – Use Case – Entity** 간의 실제 호출 흐름을 검증

### 3.2 시나리오 중심 접근

* **정상 시나리오**

  * DB에 정상적으로 저장 후, 조회나 후속 처리가 제대로 되는지 검증

* **예외 시나리오**

  * DB 제약조건 충돌(Unique Key 등), 외부 API 다운, 응답 지연, 네트워크 에러 등
  * 트랜잭션 롤백이 필요한 경우 그 동작 여부 확인

### 3.3 테스트 환경

1. **TestContainer / Docker 기반 DB**

   * 실제 DB와 **동일한 환경**에서 테스트 가능
   * 실행 속도는 느려지지만, 인프라 이슈를 **조기에 발견** 가능

2. **In-memory DB(H2 등)**

   * 빠른 실행 가능
   * 실제 DB와 차이가 생길 수 있으므로 **스키마 호환성** 확인

3. **Mock 서버**

   * 외부 API가 필요할 경우, [WireMock](http://wiremock.org/) 등으로 성공/실패 응답 시나리오를 미리 세팅하여 테스트

### 3.4 데이터 준비 및 정리

* **픽스처(Fixture)**

  * 테스트에 필요한 초기 데이터 준비(예: 계정, 상품, 설정값 등)

* **테스트 간 격리**

  * 테스트 시작/종료 시 DB 초기화(`TRUNCATE` 등)
  * 실행 순서에 따라 서로 영향을 주지 않도록 주의

### 3.5 계약(Contract) 테스트(선택)

* **외부 API 연동이 많거나, API 스펙 변경 위험이 큰 경우**

  * **Consumer-Driven Contract(예: Pact)** 방식 권장
  * 소비자(클라이언트)와 제공자(서버) 간의 **요청/응답 규격**을 미리 정의하고, 자동화 테스트로 검증

---

## 4. 운영 및 주의 사항

1. **CI/CD 파이프라인 내 자동화**

   * **단위 테스트**: Pull Request 등에서 **자주 실행** → 빠른 피드백
   * **통합 테스트**: PR Merge나 배포 전 등 주기적으로 실행 → 인프라 종속적 오류 조기 발견

2. **Mock 남용 주의**

   * Mock은 필요한 만큼만 사용, **구현 세부사항에 과도하게 의존**하지 않도록 설계
   * 가능한 **In-memory / Fake** 구현을 통해 **실제 로직**을 테스트하는 편이 유지보수에 유리

3. **테스트 이름 & 구조 명확화**

   * **Given-When-Then** 패턴, **Arrange-Act-Assert** 패턴 등 사용해 테스트 가독성 향상
   * 소스 코드 구조(패키지, 모듈)와 테스트 코드 구조를 **일치**시켜 유지보수 편의성 확보

4. **회귀 테스트(Regression Test) 강화**

   * 새로운 기능 도입, 리팩토링 시 **기존 단위/통합 테스트가 깨지지 않는지** 확인
   * 기존 테스트 케이스를 **충실 유지** 및 **커버리지 보완**

5. **테스트 커버리지 목표 설정**

   * **비즈니스 로직**(엔티티, 유즈케이스)은 높은 커버리지(80\~90% 이상) 권장
   * **어댑터** 등 I/O 중심 모듈은 핵심 예외, 변환 로직 위주로 커버
   * \*\*무조건 100%\*\*는 비합리적일 수 있으므로 **중요도**에 따라 우선순위 부여

---

## 5. 결론

* **엔티티(Entity)** → **유즈케이스(Use Case)** → **어댑터(Adapter/Port)** 순으로 **단위 테스트**를 촘촘히 작성
* **유즈케이스 \~ 어댑터 \~ 실제 인프라**와 연동하는 **통합 테스트**로 주요 시나리오 검증
* **Mock**과 **실제 환경**을 적절히 사용해 **테스트 피라미드**를 구성하면, 유지보수성과 신뢰도를 동시에 확보

이 지침을 기반으로, 기능 추가나 변경 시
**단위 테스트 → 통합 테스트 → (필요 시) 계약 테스트**를 순차적으로 진행하면
클린 아키텍처 원칙에 맞춰 **안정적으로** 비즈니스 로직과 외부 연동을 **검증**할 수 있습니다.

---

## 6. 기능 추가 시 사전 준비 및 테스트 절차

새로운 기능(예: **기능 A**)을 추가하거나 기존 기능을 개선할 때, **도메인 요구사항**이나 **시스템 요구사항**이 먼저 명확하게 정리되어야 합니다. 이후 **사전 자료**와 **테스트 절차**를 단계별로 준비해주세요.

### 6.1 사전 준비(요구사항 및 자료 확보)

1. **요구사항 문서/스토리**

   * 사용자 스토리, 기능 정의서, UX 요구사항, API 스펙 등
   * 예) “사용자는 장바구니에 상품을 추가할 수 있어야 한다.”

2. **데이터 모델/스키마 변경사항**

   * DB 테이블 구조 수정 혹은 추가가 필요한지 확인
   * 예) 주문 테이블에 결제 상태 컬럼 추가

3. **외부 연동/제3자 API 확인**

   * 기존 인터페이스와 호환성, 새 API 사용 시 스펙 검토
   * 예) 결제대행사 API 신규 버전 사용 시 테스트 키/시크릿 확보

4. **테스트 자료(첨부 문서, 샘플 데이터 등)**

   * 실무에서 사용할 실제 데이터의 샘플 혹은 축약판
   * 예) 테스트용 고객 정보 CSV, 상품 리스트 JSON 등

### 6.2 테스트 절차

1. **기능 설계/요구사항 분석**

   * 기능 A가 어떤 엔티티와 유즈케이스에 영향을 미치는지,
     어떤 Adapter(포트)를 새로 만들거나 수정해야 하는지 결정
   * 요구사항 내 예외 케이스(에러 처리, 누락 필드 등)도 함께 정리

2. **단위 테스트 작성(엔티티/유즈케이스/어댑터)**

   1. **엔티티 단위 테스트**

      * 새로 추가된 엔티티의 **도메인 로직** 검증
      * 기존 엔티티 확장 시, 변경된 로직이 이전 기능과 충돌이 없는지 테스트
   2. **유즈케이스 단위 테스트**

      * Mock/Stub을 활용해 변경된 유즈케이스 로직 확인
      * 정상/예외 시나리오를 꼼꼼히 검증
   3. **어댑터 단위 테스트**

      * 새로 추가된 혹은 수정된 Adapter의 데이터 변환, 예외 처리 확인
      * API 스펙 변경 시 DTO 매핑 부분 집중 점검

3. **사전 인프라 준비**

   * DB 스키마 마이그레이션, TestContainer 구성, Mock 서버 설정 등
   * 필요한 **테스트용 계정/토큰** 등을 확보

4. **통합 테스트 실행**

   1. **정상 시나리오**

      * 새 기능으로 DB까지 정상적으로 데이터가 저장/조회/처리되는지 확인
   2. **에러 시나리오**

      * DB 제약조건 위반, 외부 API 실패, 네트워크 지연 등 예외 상황 대응 확인
   3. **자동화 파이프라인(CI/CD) 연동**

      * Pull Request 시 자동으로 단위 테스트 → 통합 테스트가 돌아가도록 구성

5. **리뷰 & 회귀 테스트**

   * 리뷰를 통해 누락된 테스트 케이스가 있는지, 기존 기능에 영향이 없는지 재확인
   * 기존 통합 테스트, 계약 테스트(필요 시)도 함께 점검

6. **추가 문서(첨부자료) 관리**

   * API 스펙, DB 변경 내역, 테스트 데이터 샘플 등을 **공유 문서**나 **Wiki**에 정리
   * 차후 유지보수 시 참고할 수 있도록 지속 관리

### 6.3 결론

* **사전 요구사항/자료**를 충분히 확보해야 **새로운 기능 테스트**가 정확해집니다.
* **단위 테스트**로 새 기능 로직을 빠르게 검증한 후, **통합 테스트**로 실제 환경에서의 동작을 확인합니다.
* 이때, **기존 테스트 케이스**에 영향이 없도록 **회귀 테스트**도 주기적으로 수행합니다.
* 문서화된 \*\*테스트 자료(첨부 샘플, API 문서 등)\*\*를 지속 관리하면 향후 유지보수 및 추가 개발 시 유용합니다.

```
```
