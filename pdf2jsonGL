# IACS 문서 구조화 지침서 (버전 2.1, 2025‑06‑20)

> **변경 요약**
> ‑ JSON 스키마 필드 명칭·대소문자·쉼표 오류 수정
> ‑ `split_total`, `column_count`, `figure_type` 등 새 필드 추가
> ‑ Annex / Appendix 계층·ID 명명 통일
> ‑ 토큰 계산·절 분할·검증 로직 구체화
> ‑ Cross‑reference 객체화
> ‑ 예시 코드·용어 일관성 개선

---

## 1. 개요

### 1.1 목적

본 지침서는 **IACS** (International Association of Classification Societies) 기술 문서를 PDF 원본으로부터 **Markdown + JSON** 구조 데이터로 변환할 때 필요한 표준 절차·포맷을 정의한다.

### 1.2 적용 범위

* UR, PR, UI, Annex, Appendix 등 **IACS 정식 발간물**
* 가스 탱커·LNG·해양플랜트 관련 기술 규정

### 1.3 주요 원칙

1. **Section 단위 추출** & 계층 보존
2. **750 token** 초과 시 `400 – 500 token` 단위로 **스플릿**
3. 텍스트 vs 비텍스트(테이블·그림·노트) **분리·연결**
4. **참조 무결성**(ID unique + cross‑link) 유지
5. 출력 콘텐츠는 **Markdown**
6. 문서 간 교차 참조는 **객체형 배열**로 표현

---

## 2. 문서 구조화 절차

| 단계               | 작업                                                                                                     | 세부 내용 |
| ---------------- | ------------------------------------------------------------------------------------------------------ | ----- |
| **2.1 초기 분석**    | ① 문서 타입·버전·개정이력 식별<br>② 목차 파싱 → 최상위 절 (1‑N, Annex) 추출<br>③ 테이블·그림·노트·Appendix 위치 매핑                    |       |
| **2.2 콘텐츠 추출**   | ① 동일 hierarchy별 텍스트 수집<br>② LaTeX · Markdown 변환<br>③ `openai‑tiktoken` 등 BPE 토크나이저로 **실측 토큰 계산**       |       |
| **2.3 절 분할**     | ① `total_token_count > 750` → 분할 대상<br>② 가장 가까운 **문단 경계**에서 커트<br>③ `split_no`(1…n) + `split_total` 기록 |       |
| **2.4 보조 요소 처리** | 테이블 → JSON, 그림 → JSON(+이미지), 노트·Footnote → JSON, Appendix 폼 → JSON                                     |       |
| **2.5 검증**       | JSON Schema lint, ID 중복, 참조 해상, Markdown link test, 토큰 재계산                                             |       |
| **2.6 출력**       | ① `<document_id>.jsonl` (섹션) <br>② `<document_id>_tables.jsonl`, … <br>③ 검증 리포트(`.html` 또는 `.md`)      |       |

---

## 3. JSON 스키마

### 3.1 메인 섹션 오브젝트

```jsonc
{
  "document_type": "UR | PR | UI | Annex | Appendix",
  "document_id": "UR_G1",
  "document_title": "Vessels with cargo containment system for liquefied gas",
  "doc_version": "Rev.3",
  "supersedes": "Rev.2",
  "revision_date": "2023-07-01",
  "implementation_date": "2024-01-01",
  "applicable_to": "LNG carriers",
  "parent_id": null,                // 최상위면 null
  "section_id": "UR_G1-3.2",
  "hierarchy_no": "3.2",
  "split_no": 1,
  "split_total": 2,
  "section_title": "Pressure Testing Requirements",
  "subsections": [
    { "id": "3.2.1", "title": "Scope", "token_count": 120 },
    { "id": "3.2.2", "title": "Procedure", "token_count": 380 }
  ],
  "total_token_count": 820,
  "related_tables": ["UR_G1-3.2_Table1"],
  "related_notes": ["UR_G1-3.2_Note001"],
  "related_figures": ["UR_G1-3.2_Fig001"],
  "related_appendices": ["UR_G1_Appx1"],
  "cross_references": [
    { "type": "UR", "target": "UR_Z15-4.1" },
    { "type": "IGC", "target": "4.13.2" }
  ],
  "content_format": "markdown",
  "language": "eng",
  "content": "### 3.2 Pressure Testing Requirements\n\n1. All pressure‑containing parts..."
}
```

> **변경점** 
> • `applicable_to` 뒤 쉼표 추가 • `split_total` 필드 신설
> • `related_appendices` 로 명칭 통일 • `cross_references` → 객체 배열화

### 3.2 테이블 오브젝트

```jsonc
{
  "table_id": "UR_G1-3.2_Table1",
  "document_id": "UR_G1",
  "title": "Minimum Pressure Test Values",
  "section_reference": "UR_G1-3.2",
  "caption": "Test values for independent tank systems",
  "sheet": null,
  "row_count": 8,
  "column_count": 5,
  "has_notes": true,
  "content": "|Tank type|Max pressure (MPa)|...|"
}
```

### 3.3 노트 / 풋노트 오브젝트

```jsonc
{
  "note_id": "UR_G1-3.2_Note001",
  "document_id": "UR_G1",
  "title": "Implementation Note",
  "section_reference": "UR_G1-3.2",
  "type": "footnote",
  "related_content": "This UR is to be uniformly implemented...",
  "keywords": ["implementation", "uniform"]
}
```

### 3.4 그림 오브젝트

```jsonc
{
  "figure_id": "UR_G1-3.2_Fig001",
  "document_id": "UR_G1",
  "section_reference": "UR_G1-3.2",
  "title": "Typical Tank Arrangement",
  "figure_type": "schematic",
  "caption": "Layout of Type C independent tanks",
  "page": 17,
  "image_url": "https://assets.example.com/iacs/UR_G1/Fig001.png"
}
```

### 3.5 Appendix 오브젝트

```jsonc
{
  "appendix_id": "UR_G1_Appx1",
  "document_id": "UR_G1",
  "annex_id": "Annex_A",
  "title": "Inspection Checklist",
  "page": 45,
  "content": "- [ ] Hull structure...\n- [ ] Tank supports..."
}
```

---

## 4. ID 명명 규칙

| 구분           | 규칙                     | 예시                                |
| ------------ | ---------------------- | --------------------------------- |
| **문서 ID**    | `UR_<카테고리><번호>`        | `UR_G1`                           |
| **섹션 ID**    | `<문서ID>-<절번호>`         | `UR_G1-1.2.1`                     |
| **스플릿 ID**   | 섹션 ID + `split_no`     | `UR_G1-1.2.1-split1` *(사용자 필요 시)* |
| **테이블**      | `<섹션ID>_Table<n>`      | `UR_G1-3.2_Table1`                |
| **노트**       | `<섹션ID>_Note<3digits>` | `UR_G1-3.2_Note001`               |
| **그림**       | `<섹션ID>_Fig<3digits>`  | `UR_G1-3.2_Fig001`                |
| **Appendix** | `<문서ID>_Appx<n>`       | `UR_G1_Appx1`                     |
| **Annex**    | `<문서ID>_Annex_<ID>`    | `UR_G1_Annex_A`                   |

> **원칙** : 가장 **구체적인 섹션 번호**를 포함하고, 문서 전체 범위에 걸치면 최상위 ID 사용.

---

## 5. 토큰 계산 & 분할 규칙

1. **토크나이저**: `tiktoken.get_encoding("cl100k_base")` 권장
2. **경계**:

   * `total_token_count ≤ 750` → 분할 안 함
   * `> 750` → `400 – 500` token 단위, **문단 경계**에서 컷
3. **스플릿 번호**: `split_no`(1…n) + `split_total` 동시 기록
4. **분할 후 검증**: 각 스플릿의 `total_token_count` 재계산 → 500 token ± 50 허용

---

## 6. 검증 체크리스트

| 항목                     | 확인 방법                                       |
| ---------------------- | ------------------------------------------- |
| **필수 필드 존재**           | JSON Schema 검증 (`ajv`, `jsonschema` 등)      |
| **ID 중복**              | `(document_id, section_id, split_no)` 복합 PK |
| **Markdown 링크**        | `markdown‑link‑check` 자동 스캔                 |
| **Cross‑reference 해상** | 대상 ID 검색 → 미존재 시 오류                         |
| **LaTeX 렌더**           | KaTeX or MathJax test page 생성               |
| **토큰 수**               | 토크나이저 재실행 결과 비교                             |

---

## 7. 특수 케이스

### 7.1 다중 칼럼 PDF

`LayoutParser` → 칼럼별 bbox 정렬 → 독립 추출 → 순서대로 병합.

### 7.2 복잡한 테이블

* 셀 병합 해제 후 **열 ≤ 10 · 행 ≤ 30** 단위로 분할
* 초과 시 다단 테이블로 **Table ID 연번** 부여

### 7.3 Annex / Appendix

* **Annex**: 본문 상위 절과 동등, `parent_id = null`, 자체 JSON 생성
* **Appendix**: Annex 하위 문서, `parent_id = <Annex_id>`, `appendix_id` 규칙 적용

---

## 8. 프로세스 자동화 샘플 (파이썬 CLI 요약)

```bash
# 1. PDF → raw JSON
python extract_pdf.py UR_G1.pdf --out raw.json

# 2. 구조화
python transform.py raw.json --schema section --out UR_G1.jsonl

# 3. 검증
python validate.py UR_G1.jsonl --schema schema_section.json

# 4. 리포트
python report.py --doc UR_G1 --out QA_UR_G1.md
```

---

**문서 버전**: 2.1
**작성일**: 2025‑06‑20
**다음 검토일**: 2026‑06‑20

(© 2025 Your Company · All rights reserved)
