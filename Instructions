# 프로젝트 관리 작업 지시사항

본 문서는 프로젝트 개발 및 관리를 효율적으로 진행하기 위한 규칙과 절차를 정리한 것입니다.
---
### 주기적으로 '1.기본원칙'을 태스크 중에 리마인드 해줘 ### 
### 주기적으로 '1.기본원칙'을 태스크 중에 리마인드 해줘 ### 
### 주기적으로 '1.기본원칙'을 태스크 중에 리마인드 해줘 ### 
### 주기적으로 '1.기본원칙'을 태스크 중에 리마인드 해줘 ### 
### 주기적으로 '1.기본원칙'을 태스크 중에 리마인드 해줘 ### 

## 1. 기본 원칙
- **작업 지시사항 및 작업 순서를 엄격히 준수**  
- **사용자가 요청한 기능에 대해서만 구현** (과도한 기능 추가 금지)  
- **프로젝트 권한 확인 후 필요시 root 권한으로 실행**  
- **사용자가 요청한 기능은 단일 함수로 구현 하고 테스트**
- **터미널에서 에러가 있으면 완료 후 task를 종료**
- **로그를 기록하여 코드 흐름 분석**

### 1.1 추가 기능 요구 시
- **사용자가 추가 기능 구현을 요구 할 시 기존 프로젝트에 관련된 엔티티, 포트인터페이스, 유즈케이스, 추상활, 상속 관계를 검토 후 기존 코드를 재사용
- ** 프로젝트 아케텍쳐, 요구사항을 분석하고 기존 프로젝트의 엔티티, 비즈니스 로직, 포트/어답터등 기존 코드를 최대한 활용하여 계획 수립 하고 코드 작성
- ** 유사한 기능을 수행하는 엔티티, 유즈시나리오의 함수 호출 흐름도를 파악 하고 최적화된 엔티티, 유즈시나리오로 새로운 단일/복합 유즈시나리오를 구성한다.(항시 호출 흐름 명시 하고 작업할것)
- ** 코드 변경 시 과도하게 길어지지 않게 하고, 길어진느 경우 클래스를 분리 해서 관리(300줄 내외로 작성 권고)
- ** 수정 요청시, 엔티티, 유즈시타리오, 코드 흐름 을 분석 한 후 작업 진행
- ** 확인 및 검증 요청시 readme.md 문서 및 참고자료 확인 후 실행
- ** 유저시나리오에 사용자가 테스트 하거나 요청한 기존/신규 기능의 코드 흐름을 명시 할것 **

### 1.2 API, 라이브러리, 메서드, 필드 신규 사용시
- **deprecated 여부 확인 후 사용
- **API 응답 형식 검증 후 사용
- **Pydantic V2 사용

### 1.3 테스트 시 주의 사항
- **구현과 테스트 간의 계약을 명확히 정의해야 함
- **테스트 작성 시 실제 구현 시그니처와 일치시켜야 함

### 1.4 Task 완료 전 확인 사항
- **메서드 시그니처 불일치 여부 확인
- **API 응답 형식 검증 후 사용
- **모든 비동기 함수는 적절히 await 처리
----------------------------------------------------------------------------------

## 2. 프로젝트 유형 확인
### 2.1 첫 번째 단계: .MemoryBank 폴더 존재 여부 확인
- **.MemoryBank 폴더가 없는 경우 → 새 프로젝트**  
  - 아래 [1.1 새 프로젝트 초기 설정](#11-새-프로젝트-초기-설정) 진행
- **.MemoryBank 폴더가 있는 경우 → 기존 프로젝트**  
  - [2. 진행 중 프로젝트 관리](#2-진행-중-프로젝트-관리)로 이동

### 2.2 새 프로젝트 초기 설정
2.2.1 **환경 설정**
   - 프로젝트명으로 가상환경 생성
   - `activate` / `deactivate` 별칭 설정
   - 가상환경 폴더를 `.gitignore`에 추가
2.2.2. **Git 레포지토리 초기화**
   - `git init`
   - `.gitignore` 설정 등 기본 구성

2.2.3. **필수 폴더 및 파일 생성**
2.2.4. **설정파일**
   - ' API KEY, ID 등 사용자 설정 파일은 .env 에 저장'
------------------------------------------------------------------------------------------------------
## 3. 프로젝트 관리(Task 완료 또는 사용자가 10분 이상 명령이 없을 시 갱신)
### 3.1 use_senarios.md 관리
 - 사용자 요구한 사항을 요약 하고 atomic, composit usecase 기록
 - 이전 요구사항과 다른 경우 [ ] 를 표시하고 마지막 요구사항만을 반영
 - 기존 usecase 기반 새로운 가능안 유즈케이스 제안(시스템이 반영하지 않도록 표기)
- .MemoryBank 에 파일이 없으면 생성하고 초기 projectbrief.md 참조하여 기록
### 3.2 projectbrief.md 참조
 - .MemoryBank 에 파일이 없으면 생성
 - 프로젝트 핵심 요구 사항 및 목표(프로젝트 요구사항)
### 3.3 systemPatterns.md
 - .MemoryBank 에 파일이 없으면 생성
 - 프로젝트 아키텍쳐
 - 클래스 다이어 그램
 - 어답터 리스트
### 3.4 productContext.md
 - .MemoryBank 에 파일이 없으면 생성
 - 에러 확인 및 솔루션 기록
 - 예방조치 방법 작성
### 3.5 techContext.md
 - .MemoryBank 에 파일이 없으면 생성
 - (초기) 프로젝트 진행 시 초기 기술 스택 및 설정 참고 
  - 변경된 사항 업데이트 기록(변경항목 체크)
 - .MemoryBank/referenc 에 외부 API, 데이터베이스 사용 지침 관리
### 3.6 taskContext.md
 - .MemoryBank 에 파일이 없으면 생성
 - task 별 진행사항 및 주요 이슈 기록
 - text 후 에러 내용 및 해결 과정 기록
### 3.7 progress.md
 - .MemoryBank 에 파일이 없으면 생성
 - 프로젝트 진행 사항 및 todolist 관리
### 3.8 테스트 관리

### 4. 에이전트에게 제공하는 코멘트
## 4.1 코드 작성 시 주의
- 같은 역할의 어댑터는 동일한 반환 타입 사용 했는지 확인
- 강한 타입 타입 힌트와 런타임 거증 병행
- 부분 실패를 허용 하는 경고한 에러 처리
- 저장과 조회 간 일관되 구조 유지
## 4.2 에러 조치
- 2번 이상 에러 처리가 되지 않은 경우 디버깅 할건
- 전체 호출 스텍을 분석 한 후 인테페이스, 반환 타입 등을 확인





## 5. **테스트 실행 프로세스**
- 어답터 작성 후 단위 테스트 실행(모든 어답터)
-- 어답터 테스트 시 입력, 출력 데이터 형식 검증
- 사용자 요청한 기능에 대해서는 단위테스트(기본 실행)
-- 신규 또는 변경 된 함수는 별도 테스트 코드를 작성하지 말고 구현된 CLI를 이용해서 실행  
- 통합테스트(별도 사용자 확인 후 진행)
-- API 테스트 순으로 지정

5.1. **테스트 계획서** 작성
- 3자가 테스트 할 수 있도록 테스트 계획서 작성
---

### 2.4 Docker 환경 검토 (도커 환경인 경우)

1. **일반 환경**
- `Dockerfile` 내부 분석
- Python 및 라이브러리 버전 적절성 검토

2. **GPU 환경**
- 호스트 NVIDIA 드라이버 및 CUDA 확인
- Docker 내부 라이브러리 호환성 검토

3. **라이브러리 지원**
- 라이브러리 관련 이슈는 `context7 MCP 서버` 활용

---

## (부록) 중복된 사항 정리

- **작업 지시사항 및 작업 순서를 엄격히 준수**  
- **사용자가 요청한 기능에 대해서만 구현 (과도한 기능 추가 금지)**  
- **권한 확인 후 필요 시 root 권한으로 실행**  

위 핵심 사항들은 모든 단계에서 동일하게 적용됨을 유의하시기 바랍니다.

## 상시 중요하게 고려사항
## 상시 중요하게 고려사항
## 상시 중요하게 고려사항


인증에 필요한 기본 정보는 .env 에 있고 

**최종 업데이트:** 2023-05-23
