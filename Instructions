# 프로젝트 관리 작업 지시사항

본 문서는 프로젝트 개발 및 관리를 효율적으로 진행하기 위한 규칙과 절차를 정리한 것입니다.
---
## 0. 기본 원칙

- **작업 지시사항 및 작업 순서를 엄격히 준수**  
- **사용자가 요청한 기능에 대해서만 구현** (과도한 기능 추가 금지)  
- **프로젝트 권한 확인 후 필요시 root 권한으로 실행**  
- **사용자가 요청한 기능은 단일 함수로 구현 하고 테스트**

## 1. 프로젝트 유형 확인
### 1.1 첫 번째 단계: docs 폴더 존재 여부 확인
- **docs 폴더가 없는 경우 → 새 프로젝트**  
  - 아래 [1.1 새 프로젝트 초기 설정](#11-새-프로젝트-초기-설정) 진행
- **docs 폴더가 있는 경우 → 기존 프로젝트**  
  - [2. 진행 중 프로젝트 관리](#2-진행-중-프로젝트-관리)로 이동

### 1.1 새 프로젝트 초기 설정
1. **환경 설정**
   - 프로젝트명으로 가상환경 생성
   - `activate` / `deactivate` 별칭 설정
   - 가상환경 폴더를 `.gitignore`에 추가
2. **Git 레포지토리 초기화**
   - `git init`
   - `.gitignore` 설정 등 기본 구성

3. **필수 폴더 및 파일 생성**

## 2. 진행 중 프로젝트 관리
### 2.1 user_requirements.md 관리
 - 사용자 요구한 사항을 요약 하고 카테고리 별로 기록
 - 이전 요구사항과 다른 경우 [ ] 를 표시하고 마지막 요구사항만을 반영 
 - 사용자 요구사항은 단일 메서드로 구현

### 2.2 테스트 관리

1. **테스트 실행 프로세스**
- 사용자 요청한 기능에 대해서는 단위테스트(기본 실행)
-- 신규 또는 변경 된 함수는 별도 테스트 코드를 작성하지 말고 구현된 CLI를 이용해서 실행  
- 통합테스트(별도 사용자 확인 후 진행)
-- API 테스트 순으로 지정

2. **에러 처리**
- 테스트 중 발견된 에러는 원본 코드에 반드시 반영
- `testreport` 작성으로 에러 내용 및 해결 과정 기록

---

### 2.4 Docker 환경 검토 (도커 환경인 경우)

1. **일반 환경**
- `Dockerfile` 내부 분석
- Python 및 라이브러리 버전 적절성 검토

2. **GPU 환경**
- 호스트 NVIDIA 드라이버 및 CUDA 확인
- Docker 내부 라이브러리 호환성 검토

3. **라이브러리 지원**
- 라이브러리 관련 이슈는 `context7 MCP 서버` 활용

---

## (부록) 중복된 사항 정리

- **작업 지시사항 및 작업 순서를 엄격히 준수**  
- **사용자가 요청한 기능에 대해서만 구현 (과도한 기능 추가 금지)**  
- **권한 확인 후 필요 시 root 권한으로 실행**  

위 핵심 사항들은 모든 단계에서 동일하게 적용됨을 유의하시기 바랍니다.

---

**최종 업데이트:** 2023-05-23
