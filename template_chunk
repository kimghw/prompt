# JSON 세그멘테이션 요구사항 (v2.0)

## 1. 기본 요구사항

### 1.1 문서 분할 규칙
- **분할 단위**: 서브섹션 단위로 분할
- **세그멘테이션 기준**:
  - 750 토큰 이하: 서브섹션들을 합침
  - 750 토큰 초과: 분할
  - 합칠 때는 같은 상위 섹션(parent section)에 속한 것들만 합침
- **토큰 계산**: tiktoken (GPT-4 기준) 사용, 테이블/그림 참조 텍스트 포함

### 1.2 세그먼트 관리
- 각 세그먼트는 **독립적인 객체**로 관리
- 모든 세그먼트는 동일한 문서 메타데이터 포함
- **세그먼트 ID 체계**: `{document_id}_{section}_{subsection}_{sequence}`
  - 예: `A1_1_2_001` (A1 문서의 1.2절 첫 번째 세그먼트)

### 1.3 테이블 처리
- **content**에서 테이블 내용은 참조만 표시 (예: `[See table TBL_001]`)
- 실제 테이블 데이터는 **tables** 배열에 구조화하여 저장
- 테이블은 **Markdown 형식**으로 작성

## 2. JSON 구조

### 2.1 세그먼트 객체 필수 필드

```json
{
  "segment_id": "{document_id}_{section}_{subsection}_{sequence}",
  "document_title": "전체 문서 제목",
  "document_id": "문서 식별 번호",
  "version": "버전 정보",
  "parent_section": "상위 섹션",
  "section_title": "현재 섹션 제목",
  "hierarchy": {
    "level": 3,
    "path": ["A1", "A1.1", "A1.1.1"],
    "parent_id": "A1_1_1_000"
  },
  "navigation": {
    "previous_segment": "A1_1_1_000",
    "next_segment": "A1_1_1_002",
    "related_segments": ["A1_1_2_001", "A1_2_1_001"]
  },
  "applicability": {
    "effective_date": "2024-07-01",
    "action_type": ["contract", "installation"],
    "ship_type": ["bulk carrier", "ore carrier"],
    "size": {
      "length_m_min": 150,
      "length_m_max": null,
      "gt_min": 500,
      "gt_max": null
    },
    "equipment": ["EGCS"],
    "service_category": null,
    "service_notation": ["unrestricted", "restricted"],
    "optional": false,
    "exclusion": {
      "ship_type": ["LNG carrier"],
      "conditions": ["inland navigation vessels"]
    }
  },
  "subsections": ["포함된 하위 서브섹션 목록/이름"],
  "content": "실제 텍스트 내용 (테이블 제외)",
  "content_type": "body | enclosure",
  "tables": [
    {
      "table_id": "TBL_001",
      "table_name": "테이블 제목",
      "table_type": "embedded_table | measurement_form | data_entry_form | reference_table",
      "column_count": 7,
      "row_count": 45,
      "has_merged_cells": true,
      "markdown": "| 헤더1 | 헤더2 |\n|-------|-------|\n| 데이터1 | 데이터2 |",
      "structured_data": {
        "headers": ["EN", "Mass per anchor"],
        "data": [["205-240", "660"]]
      }
    }
  ],
  "figures": [
    {
      "figure_id": "{document_id}_figure_N",
      "figure_name": "그림 제목",
      "url": "",
      "description": "이 그림은 어떤... 그림입니다."
    }
  ],
  "notes": [
    {
      "note_id": "NOTE_001",
      "content": "주석/각주 내용"
    }
  ],
  "cross_references": [
    {
      "ref_id": "UR_W29",
      "ref_type": "internal | external",
      "ref_title": "Manufacture of anchors",
      "ref_section": null
    }
  ],
  "search_optimization": {
    "keywords": ["anchoring", "equipment", "bower anchor"],
    "summary": "이 섹션은 앵커 장비의 설계 요구사항을 다룹니다.",
    "search_text": "정규화된 검색용 텍스트"
  },
  "metadata": {
    "page_numbers": [1, 2, 3],
    "sheet_numbers": ["A-001", "A-002"],
    "token_count": 650,
    "created_date": "2023",
    "document_type": "requirement | standard | guideline",
    "language": "en"
  },
  "revision_history": [
    {
      "revision": "Rev.8",
      "date": "June 2023",
      "changes": "Updated requirements for..."
    }
  ],
  "validation": {
    "is_complete": true,
    "has_missing_references": false,
    "parsing_warnings": [],
    "last_validated": "2024-01-15"
  }
}
```

### 2.2 content_type 필드 설명
- **"body"**: 문서의 본문 내용
  - 규정, 절차, 설명
  - 번호가 매겨진 조항들
  - 내장된 테이블 (embedded table)
- **"enclosure"**: 첨부자료, 부록, 별첨 등의 내용
  - 첨부자료 (Attachment, Enclosure)
  - 부록 (Appendix)
  - 별첨 (Annex)
  - 양식 (Forms)
  - 참고자료

## 3. 마크다운 테이블 형식

### 3.1 기본 테이블 형식
```markdown
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Data 1   | Data 2   | Data 3   |
| Data 4   | Data 5   | Data 6   |
```

### 3.2 복잡한 테이블 (다중 헤더)
```markdown
| MAIN HEADER ||| SUB HEADERS |||
|-------------|---|---|----------|---|---|
| Sub Col 1 | Sub Col 2 | Sub Col 3 | Sub Col 4 | Sub Col 5 | Sub Col 6 |
| Data | Data | Data | Data | Data | Data |
```

## 4. 세그멘테이션 프로세스

### 4.1 단계별 처리
1. **문서 분석**: 전체 구조 파악 및 계층 구조 매핑
2. **내용 분류**: body와 enclosure 구분
3. **섹션 식별**: 상위 섹션과 서브섹션 구분
4. **토큰 계산**: 각 서브섹션의 토큰 수 계산 (tiktoken 사용)
5. **그룹핑**: 같은 parent_section의 서브섹션들을 750 토큰 이하로 그룹화
6. **세그먼트 생성**: 각 그룹을 독립적인 세그먼트로 생성
7. **관계 설정**: 세그먼트 간 navigation 정보 설정
8. **검증**: 완전성 및 참조 무결성 검증

### 4.2 에러 처리
- 파싱 실패 시 원본 텍스트를 `raw_content` 필드에 보존
- 불완전한 세그먼트는 `validation.is_complete = false`로 표시
- 수동 검토 필요 항목은 `validation.parsing_warnings`에 기록

### 4.3 주의사항
- 최소 제목 단위로 분할
- 내용을 모두 포함하는 상위 제목 식별
- 세그먼트별로 테이블, 그림, 노트 키 추가
- 각 세그먼트는 독립적으로 이해 가능해야 함
- content_type을 정확히 분류하여 검색 효율성 향상
- 세그먼트 간 관계 정보 유지

## 5. 출력 형식

### 5.1 기본 출력 구조
```json
{
  "document_metadata": {
    "total_segments": 45,
    "total_tokens": 35000,
    "processing_date": "2024-01-15",
    "processor_version": "2.0"
  },
  "segments": [
    {
      "segment_id": "A1_1_1_001",
      "document_title": "Anchoring Equipment",
      "content_type": "body",
      ...
    },
    {
      "segment_id": "A1_1_1_002",
      "content_type": "body",
      ...
    }
  ]
}
```

### 5.2 품질 보증
- 모든 필수 필드 존재 여부 확인
- 세그먼트 ID 중복 검사
- 참조 무결성 검증 (cross_references, navigation)
- 토큰 수 제한 준수 확인

## 6. 확장성 고려사항

### 6.1 버전 관리
- 문서 개정 시 이전 버전과의 매핑 정보 유지
- `supersedes` 및 `superseded_by` 필드 활용

### 6.2 다국어 지원
- `language` 필드를 통한 언어 식별
- 번역된 문서의 경우 원본 문서 참조 정보 포함

### 6.3 향후 확장 가능 필드
- 사용자 정의 메타데이터
- AI 분석 결과 (요약, 키워드 추출 등)
- 사용 통계 및 피드백 정보
