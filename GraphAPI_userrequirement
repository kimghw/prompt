# Microsoft 365 메일 수집 시스템 v1.0.0

*(created 2025-01-01, last modified 2025-01-01)*

| 작성자  | 역할 | 이메일                                           |
| :--- | :- | :-------------------------------------------- |
| 작성자명 | 역할 | [email@example.com](mailto:email@example.com) |

---

## 1. 프로젝트 개요

### 🔍 배경

* Microsoft 365 사용자의 이메일 데이터를 **안전하게 수집·동기화**할 시스템이 필요
* OAuth 2.0 **Authorization Code Flow**로 사용자 권한을 위임하여 인증 처리

### 🎯 목표

* **Microsoft Graph API**를 이용한 안전한 메일 데이터 수집
* 다수 사용자 이메일 계정 및 설정파일 관리
* 다수 사용자 위임, 메일 조회, 메일 보내기 
* 갱신된 이메일 조회 및 알림 수신으로 증분 데잍 API로 송신
* 

### 💎 핵심 가치

| 가치          | 설명                              |
| :----------   |  :------------------------------ |
| **보안성**     | OAuth 2.0 기반 안전한 인증·권한 관리       |
| **효율성**     | Delta Query 활용 증분 동기화, 메일 수신 알림 |
| **사용자 친화성** | 간편한 웹 기반 인증 프로세스                |

### 👥 대상 사용자

| 유형      | 필요 사항                    |
| :------ | :----------------------- |
| 기업 사용자  | Microsoft 365 계정, 웹 브라우저 |
| 시스템 관리자 | 사용자 권한 관리, 동기화 상태 모니터링   |

---

## 2. 프로젝트 범위

### 포함

* 다중 사용자 계정 및 설정파일 관리
* OAuth 2.0 인증 및 토큰 관리
* Microsoft Graph API를 통한 메일 조회, 보내기
* 증분 메일 인지 및 동기화(델트링크, 웹훅)
* 수집 메일 저장·관리 & 기간별 메일 수집
* 데이터베이스로 계정 및 조회한 메일 히스토리 관리 

---

## 3. 기술 스택

## 3. 기술 스택 ― **전체 통합표**

| 구분                    | 패키지 / 엔진             | 버전                  | 용도 · 비고                          |
| :--------------------  | :------------------- | :------------------ | :------------------------------- |
| **언어 & 런타임**        | Python               | **3.11 권장** (3.10+) | 비동기 지원, MSAL 호환                  |
| **웹 · ASGI**          | FastAPI              | 0.104.1             | REST API 서버, OAuth 콜백            |
|                        | Uvicorn              | 0.24.0              | ASGI 실행 서버                       |
| **CLI**                | Typer                | 0.9.0               | 현대적 CLI 프레임워크                    |
|                       | Rich                 | 13.7.0              | 터미널 UI (컬러, 표, 프로그레스바)           |
| **데이터 검증 & 설정**    | Pydantic             | 2.5.0               | 데이터 검증·직렬화                       |
|                       | Pydantic-Settings    | 2.1.0               | 애플리케이션 설정 검증 (.env 포함)           |
|                       | Python-dotenv        | 1.0.0               | `.env` 파일 로딩                     |
| **HTTP 클라이언트**      | HTTPX                | 0.25.2              | 비동기 HTTP 호출                      |
|                       | Requests             | 2.31.0              | 동기 HTTP (호환용)                    |
|                       | aiohttp              | latest              | OAuth 콜백 서버 등 보조                 |
| **ORM · DB · 마이그레이션** | SQLAlchemy           | 2.0.23              | 비동기 ORM                          |
|                       | Alembic              | 1.13.1              | DB 마이그레이션                        |
|                       | PostgreSQL           | latest              | 프로덕션 메인 DB                       |
|                       | SQLite               | —                   | 개발·테스트용 경량 DB                    |
| **캐시 / 브로커**        | Redis                | 5.0.1               | 캐싱·메시지 브로커 *(Celery backend)*    |
| **비동기 & 백그라운드**   | asyncio              | builtin             | Python 표준 비동기 러너                 |
|                       | aiofiles             | 23.2.1              | 비동기 파일 I/O                       |
|                       | Celery               | 5.3.4               | 분산 작업 큐 *(선택)*                   |
| **재시도 · 복원력**      | tenacity             | 9.1.2               | 재시도·백오프 패턴                       |
| **인증 · 보안**         | MSAL                 | 1.25.0              | Microsoft Authentication Library |
|                       | Authlib              | latest              | OAuth 2.0 구현 보조                  |
|                       | python-jose          | latest              | JWT 서명·검증                        |
|                       | Custom OAuth Impl.   | —                   | Authorization Code + PKCE 로직     |
| **로깅 · 모니터링**         | structlog            | 23.2.0              | 구조화된(키-값) 로깅                     |
|                       | python-json-logger   | 2.0.7               | JSON 포맷터                         |
|                       | sentry-sdk\[fastapi] | 1.38.0              | 에러·성능 모니터링 *(선택)*                |
| **코드 품질**             | black                | 23.11.0             | 코드 포매터                           |
|                       | isort                | 5.12.0              | import 정렬                        |
| **테스팅**               | pytest               | 7.4.3               | 테스트 프레임워크                        |
|                       | pytest-asyncio       | 0.21.1              | 비동기 테스트 지원                       |
|                       | pytest-cov           | 4.1.0               | 커버리지 측정                          |
| **유틸리티**            | python-dateutil      | 2.8.2               | 고급 날짜·시간 처리                      |
| **개발 도구**           | VS Code              | —                   | 권장 IDE                           |
|                       | Git                  | —                   | 버전 관리                            |
|                       | Docker               | latest              | 컨테이너화 *(선택)*                     |
| **환경 관리**            | venv / conda         | —                   | 가상환경                             |
|                       | .env config          | —                   | 환경 변수 관리 (.env)                  |




## 4. ATOMIC 유즈 시나리오

### 4.1 GRAPH API 다중 계정 및 인증 관리

1. AUTH001 - 계정 등록(기본 : 권한위임)
- Authorization Code Flow 와 Devide code flow 중 인증방식 선택 후 필수 정보 입력하면 데이터베이스에 저장
- 두 방식에 공통된 테이블 A 를 두고 각각 B, C 테이블을 구성
2. AUTH002 - ID 또는 이메일 정보로 조회/변경/삭제
- ID 또는 이메일 정보로 조회/변경/삭제
- 모든 사용자 정보 상세 보기
- 사용자 특정 정보 검색
- 사용자 또는 모든 사용자 토큰 상태 정보 보기
3. AUTH003 - 인증하기
- 사용자정보(이메일/ID)와 인증과정(Authentification flow, device flow)에 따라 인증하기, 인증시 필요한 정보는 데이터베이스에 갖어와서 호출하기
- 특정 사용자 또는 모든 사용자 인증 하기 
- 인증 실패 시 에러 코드 데이터베이스에 저장
- 인증 성공 시 토크 저장(토큰 관련 테이블 생성 후 저장)
4. AUTH004 - 토큰 갱신
- 사용자별 토큰 상태 관리
- 토큰 유효성 검사 및 자동 갱신 설정

### 4.2 GRAPH API 메일 송수신 조회
## 4. MAIL001 - 특정 사용자 또는 모든 사용자 메일 조회
- GRAPH API 필터를 이용해서 기간별, 최근 N개, 메일 조회
- GRAPH API 필터를 이용해 본문타입(html, txt), 본문, 제목 조회



1. 

인 경우 필수 값 입력한 후 계정 생성 후 데이터베이스 저장
- Devide code flow 인 경우 필수 값 입력한 후 게정 생성 후 데이터베이스 저장

| ID          | 기능             |   주요 처리 단계                                                                         | 입력 DTO                     | 출력 DTO      | 비고                                                       |
| :---------- | :----------     | :-----------------------------------------------------------------------------------  | :-------------------------- | :----------- | :-------------------------------------------------------------------- |
| **ACCU001** | 계정(테넌트) 등록   | 1) Email·Tenant ID 중복 확인 → 2) DB 저장 → 3) 감사 로그                                  | `CreateAccountRequest` ,            | `AccountDTO` | • 사용자로 부터 계정정보를 받아 
| **ACCU002** | 계정 조회/변경/삭제 | 1) ID 존재 확인 → 2) 권한 검사 → 3) 읽기·갱신·Soft-delete → 4) 감사 로그                     | `AccountId` / `QueryParams`   | `AccountDTO` | • Soft-delete (`deleted_at`) <br>• Status 변경 시 토큰 재검증                 |

# 입력
class CreateAccountRequest(BaseModel):
    email: EmailStr
    tenant_id: str
    auth_type: Literal["delegated"] = "delegated"
    refresh_token: SecretStr

class UpdateAccountRequest(BaseModel):
    status: Literal["active", "inactive", "error"] | None = None
    sync_window_days: int | None = None
    folder_filters: list[str] | None = None

# 출력
class TokenMeta(BaseModel):
    issued_at: datetime
    expires_at: datetime
    expires_in: int

class AccountDTO(BaseModel):
    account_id: UUID
    email: EmailStr
    tenant_id: str
    status: str
    created_at: datetime
    last_sync_at: datetime | None
    token: TokenMeta | None        # 메타만! (raw JWT X)

class DeleteResult(BaseModel):
    deleted: bool
    account_id: UUID

class PaginatedAccounts(BaseModel):
    total: int
    page: int
    size: int
    items: list[AccountDTO]


| **ACCU003** | 토큰 상태 확인         | 유효성·권한·만료 시점 점검                         | 미구현 |
### 4.1 인증(Authentication)

| ID          | 기능               | 설명                                      | 상태  |
| :---------- | :--------------- | :-------------------------------------- | :-- |
| **AUTH001** | OAuth 2.0 사용자 인증 | Authorization Code Flow, PKCE·state 포함  | 개발중 |
| **AUTH002** | 토큰 갱신            | 만료된 Access Token을 Refresh Token으로 자동 갱신 | 개발중 |
| **AUTH004** | 토큰 상태 확인         | 유효성·권한·만료 시점 점검                         | 미구현 |

**AUTH001 처리 흐름**

1. 인증 URL 생성(state, PKCE)
2. 사용자를 Microsoft 로그인 페이지로 리다이렉트
3. `authorization_code` 수신 → Access Token 교환
4. Refresh Token 안전 저장

출력(JSON 예시):

```json
{
  "access_token": "...",
  "refresh_token": "...",
  "expires_in": 3600,
  "user_info": {
    "email": "user@example.com",
    "display_name": "홍길동"
  }
}
```

---

### 4.2 메일 수집(Mail Collection)

| ID          | 기능         | Graph API 엔드포인트                            | 우선순위 | 상태  |
| :---------- | :--------- | :----------------------------------------- | :--- | :-- |
| **MAIL001** | 메일 목록 수집   | `GET /me/messages`                         | 필수   | 개발중 |
| **MAIL002** | 폴더별 메일 수집  | `GET /me/mailFolders/{folder-id}/messages` | 중요   | 미구현 |
| **MAIL003** | **증분 동기화** | `GET /me/messages/delta`                   | 필수   | 미구현 |
| **MAIL004** | 기간 메일 수집   | `GET /me/messages` (쿼리)                    | 필수   | 개발중 |
| **MAIL005** | 새로운 메일 알림  | (Webhooks / Subscriptions)                 | 필수   | 미구현 |

*MAIL003 증분 동기화 단계*

1. 최초 전체 동기화 → `deltaLink` 저장
2. 이후 동기화 시 `deltaLink` 사용 → 변경분만 수집
3. 최신 `deltaLink`로 갱신

---

## 5. 비기능 요구사항

### 🔐 보안

* PKCE·state 파라미터, HTTPS 전용
* Access Token 1 시간·Refresh Token 90 일
* 만료 5 분 전 자동 갱신
* 최소 권한 원칙(필요 스코프만 요청)

### 🚀 성능

* 동시 인증 처리 : 100 사용자/분
* 메일 수집 속도 : 1 000 메일/분
* 토큰 갱신 < 1 초

### ☑️ 가용성

* 토큰 갱신 실패 시 재시도
* Graph API 장애 시 지수 백오프
* 로컬 캐싱으로 일시적 오프라인 지원

---

## 6. API 엔드포인트 설계

### 🔑 Authentication

| Method   | Path                          | 설명                       |
| :------- | :---------------------------- | :----------------------- |
| **GET**  | `/auth/login`                 | Microsoft 로그인 페이지로 리다이렉트 |
| **GET**  | `/auth/callback?code=&state=` | OAuth 콜백, 토큰 교환          |
| **POST** | `/auth/refresh`               | 토큰 갱신                    |
| **POST** | `/auth/logout`                | 로그아웃                     |
| **GET**  | `/auth/status`                | 현재 인증 상태 조회              |

### ✉️ Mail Operations

| Method   | Path             | 설명           |
| :------- | :--------------- | :----------- |
| **POST** | `/mail/sync`     | 메일 동기화 시작    |
| **GET**  | `/mail/folders`  | 메일 폴더 목록 조회  |
| **GET**  | `/mail/messages` | 수집된 메일 목록 조회 |

---

## 7. 데이터 모델

### 7.1 `user_session`

| 필드                 | 타입 / 제약              |
| :----------------- | :------------------- |
| `user_id`          | string PK            |
| `email`            | string               |
| `display_name`     | string               |
| `access_token`     | **encrypted** string |
| `refresh_token`    | **encrypted** string |
| `token_expires_at` | datetime             |
| `delta_link`       | string               |
| `last_sync`        | datetime             |

### 7.2 `mail_message`

| 필드                  | 타입 / 제약   |
| :------------------ | :-------- |
| `message_id`        | string PK |
| `user_id`           | string FK |
| `subject`           | string    |
| `from_address`      | string    |
| `to_addresses`      | array     |
| `received_datetime` | datetime  |
| `folder_id`         | string    |
| `is_read`           | boolean   |
| `has_attachments`   | boolean   |

---

## 8. 에러 처리

### Authentication

| 코드              | 설명    | 조치             |
| :-------------- | :---- | :------------- |
| `AUTH_FAILED`   | 인증 실패 | 로그인 페이지로 리다이렉트 |
| `TOKEN_EXPIRED` | 토큰 만료 | 자동 갱신 시도       |
| `INVALID_SCOPE` | 권한 부족 | 추가 권한 요청       |

### API

| 코드                | 설명           | 조치           |
| :---------------- | :----------- | :----------- |
| `RATE_LIMIT`      | 호출 한도 초과     | 지수 백오프로 재시도  |
| `GRAPH_API_ERROR` | Graph API 오류 | 에러 로깅·사용자 알림 |

---

## 9. 모니터링

### 📊 주요 지표

* 인증 성공/실패율
* 토큰 갱신 빈도
* API 호출 수/분
* 동기화된 메일 수
* 평균 응답 시간

### 🔔 알림 조건

* 인증 실패율 > 10 %
* 토큰 갱신 실패 발생
* API 할당량 80 % 초과
* 동기화 지연 > 5 분

---

> **이 문서는 YAML 요구사항을 Markdown 형식으로 변환한 버전입니다.** 필요에 따라 섹션을 추가·수정해 사용하세요.
