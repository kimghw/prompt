# 사용자 요구사항 문서 (YAML)
# 작성 가이드: 각 섹션의 설명을 참고하여 작성하세요

project:
  name: "프로젝트명"
  version: "1.0.0"
  created_date: "2024-01-01"
  last_modified: "2024-01-01"
  authors:
    - name: "작성자명"
      role: "역할"
      email: "email@example.com"

# 1. 프로젝트 개요
overview:
  # 프로젝트가 필요한 이유와 해결하려는 문제
  background: |
    현재 상황과 문제점을 구체적으로 기술
    여러 줄로 작성 가능
  
  # 프로젝트로 달성하려는 구체적이고 측정 가능한 목표
  objectives:
    - "목표 1: 구체적인 달성 목표"
    - "목표 2: 측정 가능한 성과 지표"
  
  # 프로젝트가 제공하는 핵심 가치 (3-5개)
  core_values:
    - value: "확장성"
      description: "새로운 기능을 쉽게 추가할 수 있는 구조"
    - value: "성능"
      description: "대용량 데이터 처리 최적화"
  
  # 주요 사용자 그룹과 각 그룹의 니즈
  target_users:
    - type: "개발자"
      needs: ["API 문서", "SDK", "샘플 코드"]
    - type: "일반 사용자"
      needs: ["직관적인 UI", "빠른 응답속도"]

# 2. 프로젝트 범위
scope:
  # 프로젝트에 포함되는 기능과 영역
  included:
    - "PDF 문서 처리 및 변환"
    - "RESTful API 제공"
    - "사용자 인증 및 권한 관리"
  
  # 명시적으로 제외되는 기능 (오해 방지)
  excluded:
    - "실시간 스트리밍 처리"
    - "모바일 앱 개발"
  
  # 단계별 구현 계획
  phases:
    - phase: "MVP"
      duration: "2개월"
      features:
        - "기본 문서 업로드"
        - "텍스트 추출"
        - "기본 검색"
    
    - phase: "Phase 1"
      duration: "3개월"
      features:
        - "고급 검색 기능"
        - "벡터 임베딩"
        - "API 인증"
    
    - phase: "Phase 2"
      duration: "3개월"
      features:
        - "웹 UI"
        - "실시간 처리"
        - "다국어 지원"

# 3. 기술 스택
technology_stack:
  # 프로그래밍 언어와 버전
  languages:
    - name: "Python"
      version: "3.12+"
      reason: "비동기 처리 및 AI/ML 라이브러리 생태계"
  
  # 핵심 프레임워크
  frameworks:
    backend:
      - name: "FastAPI"
        version: "0.104.1"
        purpose: "REST API 서버"
        reason: "고성능 비동기 처리, 자동 문서화"
    
    cli:
      - name: "Click"
        version: "8.1.7"
        purpose: "CLI 인터페이스"
        reason: "직관적인 명령어 구조"
  
  # 데이터베이스
  databases:
    primary:
      type: "PostgreSQL"
      version: "15.0"
      purpose: "메타데이터 저장"
    
    vector_store:
      type: "Qdrant"
      version: "1.7.0"
      purpose: "벡터 임베딩 저장 및 검색"
    
    cache:
      type: "Redis"
      version: "7.0"
      purpose: "캐싱 및 세션 관리"
  
  # 외부 서비스 및 API
  external_services:
    - name: "OpenAI API"
      purpose: "텍스트 임베딩 생성"
      api_version: "v1"
      pricing_model: "pay-per-use"
    
    - name: "AWS S3"
      purpose: "문서 파일 저장"
      region: "ap-northeast-2"

# 4. 아키텍처
architecture:
  # 아키텍처 패턴
  patterns:
    - name: "Clean Architecture"
      reason: "비즈니스 로직과 외부 의존성 분리"
    - name: "Port/Adapter Pattern"
      reason: "유연한 외부 시스템 연동"
  
  # 설계 원칙
  principles:
    - "SOLID"
    - "DRY (Don't Repeat Yourself)"
    - "YAGNI (You Aren't Gonna Need It)"
  
  # 모듈 구조
  modules:
    core:
      description: "비즈니스 로직 (외부 의존성 없음)"
      submodules:
        - "entities"
        - "usecases"
        - "ports"
    
    adapters:
      description: "외부 시스템 연동 구현체"
      submodules:
        - "database"
        - "external_api"
        - "file_storage"
    
    interfaces:
      description: "진입점 (API, CLI)"
      submodules:
        - "rest_api"
        - "cli_commands"

# 5. 기능 요구사항
functional_requirements:
  # 핵심 기능 목록
  core_features:
    - id: "F001"
      name: "문서 업로드"
      description: "다양한 형식의 문서를 시스템에 업로드"
      priority: "필수"  # 필수/중요/선택
      status: "구현완료"  # 미구현/개발중/구현완료
      
      # 입출력 명세
      input:
        - type: "multipart/form-data"
          fields:
            - name: "file"
              type: "File"
              formats: ["PDF", "DOCX", "TXT"]
              max_size: "50MB"
      
      output:
        - type: "JSON"
          schema:
            document_id: "string"
            status: "string"
            metadata: "object"
      
      # 처리 로직
      processing_steps:
        - "파일 유효성 검증"
        - "바이러스 스캔"
        - "파일 저장"
        - "메타데이터 추출"
      
      # 적용 고려 기술
      technologies:
        libraries:
          - name: "PyPDF2"
            version: "3.0.0"
            purpose: "PDF 파일 처리"
            pros: ["순수 파이썬", "가벼움"]
            cons: ["일부 PDF 형식 미지원"]
          
          - name: "pdfplumber"
            version: "0.10.0"
            purpose: "PDF 텍스트 추출"
            pros: ["표 추출 가능", "정확도 높음"]
            cons: ["메모리 사용량 많음"]
        
        apis:
          - name: "Google Cloud Vision API"
            purpose: "OCR 처리"
            when_to_use: "스캔된 PDF 처리 시"
            pricing: "$1.5 per 1000 requests"
      
      # 성능 요구사항
      performance:
        response_time: "< 5초 (10MB 파일 기준)"
        throughput: "100 requests/minute"
        concurrent_users: 50
    
    - id: "F002"
      name: "텍스트 청킹"
      description: "문서를 의미 있는 단위로 분할"
      priority: "필수"
      status: "구현완료"
      
      input:
        - type: "Document"
          fields:
            - name: "content"
              type: "string"
            - name: "document_id"
              type: "string"
      
      output:
        - type: "List[Chunk]"
          schema:
            chunk_id: "string"
            content: "string"
            metadata: "object"
      
      processing_steps:
        - "문서 구조 분석"
        - "청킹 전략 선택"
        - "청크 생성"
        - "메타데이터 추가"
      
      technologies:
        libraries:
          - name: "LangChain"
            version: "0.0.350"
            purpose: "텍스트 분할"
            specific_classes:
              - "RecursiveCharacterTextSplitter"
              - "SemanticChunker"
            pros: ["다양한 분할 전략", "커스터마이징 용이"]
            cons: ["의존성 많음"]
          
          - name: "NLTK"
            version: "3.8.1"
            purpose: "문장 분할"
            pros: ["정확한 문장 경계 인식"]
            cons: ["추가 데이터 다운로드 필요"]
        
        apis:
          - name: "OpenAI API"
            purpose: "의미적 청킹"
            endpoint: "/v1/embeddings"
            when_to_use: "의미 기반 분할 시"
      
      configuration:
        chunk_size: 1000
        chunk_overlap: 200
        separators: ["\n\n", "\n", " ", ""]
    
    - id: "F003"
      name: "벡터 임베딩 생성"
      description: "텍스트를 벡터로 변환"
      priority: "필수"
      status: "개발중"
      
      technologies:
        libraries:
          - name: "sentence-transformers"
            version: "2.2.2"
            purpose: "로컬 임베딩 모델"
            models:
              - "all-MiniLM-L6-v2"
              - "all-mpnet-base-v2"
            pros: ["오프라인 사용 가능", "무료"]
            cons: ["GPU 필요", "모델 크기"]
          
          - name: "OpenAI SDK"
            version: "1.6.1"
            purpose: "OpenAI 임베딩 API 클라이언트"
            pros: ["고품질 임베딩", "관리 불필요"]
            cons: ["API 비용", "네트워크 의존성"]
        
        apis:
          - name: "OpenAI Embeddings API"
            models:
              - model: "text-embedding-3-small"
                dimension: 1536
                price_per_1k_tokens: 0.00002
              - model: "text-embedding-3-large"
                dimension: 3072
                price_per_1k_tokens: 0.00013
          
          - name: "Cohere Embed API"
            models:
              - model: "embed-english-v3.0"
                dimension: 1024
                price_per_1m_tokens: 0.1
  
  # 부가 기능
  additional_features:
    - name: "검색 결과 하이라이팅"
      priority: "선택"
      related_to: ["F004"]
    
    - name: "문서 버전 관리"
      priority: "중요"
      related_to: ["F001"]

# 6. 비기능 요구사항
non_functional_requirements:
  # 성능 요구사항
  performance:
    response_time:
      api_endpoints:
        - endpoint: "/upload"
          method: "POST"
          target: "< 5초"
          conditions: "10MB 파일 기준"
        
        - endpoint: "/search"
          method: "GET"
          target: "< 2초"
          conditions: "상위 10개 결과"
    
    throughput:
      sustained: "1000 requests/minute"
      peak: "2000 requests/minute"
      conditions: "4 vCPU, 16GB RAM 서버"
    
    resource_usage:
      cpu: "< 80% average"
      memory: "< 4GB per instance"
      storage_growth: "~100GB/month"
  
  # 보안 요구사항
  security:
    authentication:
      methods:
        - type: "API Key"
          for: ["API access"]
        - type: "OAuth 2.0"
          for: ["Web UI"]
          providers: ["Google", "GitHub"]
    
    authorization:
      model: "RBAC"
      roles:
        - name: "admin"
          permissions: ["all"]
        - name: "user"
          permissions: ["read", "write:own"]
        - name: "viewer"
          permissions: ["read"]
    
    encryption:
      in_transit: "TLS 1.3"
      at_rest: "AES-256"
      key_management: "AWS KMS"
    
    compliance:
      - "GDPR"
      - "SOC 2 Type II"
      - "ISO 27001"
  
  # 가용성 요구사항
  availability:
    uptime_target: "99.9%"  # 월 43분 다운타임 허용
    
    backup:
      frequency: "daily"
      retention: "30 days"
      type: "incremental"
      location: "cross-region"
    
    disaster_recovery:
      rto: "4 hours"  # Recovery Time Objective
      rpo: "1 hour"   # Recovery Point Objective
      strategy: "active-passive"
  
  # 확장성 요구사항
  scalability:
    horizontal:
      auto_scaling:
        enabled: true
        min_instances: 2
        max_instances: 10
        metrics:
          - type: "CPU"
            target: 70
          - type: "Request Rate"
            target: 1000
    
    vertical:
      max_instance_size: "16 vCPU, 64GB RAM"
    
    data_partitioning:
      strategy: "by_tenant"
      sharding_key: "organization_id"

# 7. 제약사항
constraints:
  technical:
    - type: "언어 버전"
      constraint: "Python 3.12+"
      reason: "최신 async 기능 필요"
    
    - type: "브라우저 지원"
      constraint: "Chrome 90+, Firefox 88+, Safari 14+"
      reason: "WebAssembly 지원 필요"
  
  business:
    budget:
      development: "$100,000"
      annual_operation: "$20,000"
      contingency: "10%"
    
    timeline:
      start_date: "2024-01-01"
      mvp_date: "2024-03-01"
      phase1_date: "2024-06-01"
      final_date: "2024-12-01"
    
    regulations:
      - name: "개인정보보호법"
        requirements: ["개인정보 암호화", "접근 로그"]
      - name: "전자문서법"
        requirements: ["문서 무결성 보장", "타임스탬프"]
  
  operational:
    team_size: 5
    skill_requirements:
      - "Python 개발 3년 이상"
      - "클라우드 인프라 경험"
    maintenance_window: "매주 일요일 02:00-06:00 KST"

# 8. 테스트 요구사항
testing_requirements:
  unit_testing:
    coverage_target: 80
    frameworks:
      - "pytest"
      - "pytest-asyncio"
      - "pytest-mock"
  
  integration_testing:
    scope:
      - "API endpoints"
      - "Database operations"
      - "External service calls"
    tools:
      - "Postman/Newman"
      - "Docker Compose"
  
  performance_testing:
    tools:
      - name: "Locust"
        for: "Load testing"
      - name: "K6"
        for: "Stress testing"
    
    scenarios:
      - name: "Normal Load"
        users: 100
        duration: "30 minutes"
        success_criteria:
          response_time_p95: "< 3s"
          error_rate: "< 1%"
      
      - name: "Peak Load"
        users: 500
        duration: "10 minutes"
        success_criteria:
          response_time_p95: "< 5s"
          error_rate: "< 5%"
  
  security_testing:
    - type: "SAST"
      tools: ["Bandit", "Safety"]
    - type: "DAST"
      tools: ["OWASP ZAP"]
    - type: "Dependency Scan"
      tools: ["Snyk", "Dependabot"]

# 9. 배포 및 운영
deployment_operations:
  deployment:
    strategy: "Blue-Green"
    
    environments:
      - name: "development"
        url: "https://dev.example.com"
        auto_deploy: true
        branch: "develop"
      
      - name: "staging"
        url: "https://staging.example.com"
        auto_deploy: true
        branch: "main"
        approval_required: false
      
      - name: "production"
        url: "https://api.example.com"
        auto_deploy: false
        branch: "main"
        approval_required: true
        approvers: ["tech-lead", "pm"]
    
    rollback:
      strategy: "automatic"
      conditions:
        - "Error rate > 10%"
        - "Response time > 10s"
        - "Health check failures"
  
  monitoring:
    infrastructure:
      tools:
        - name: "Prometheus"
          for: "Metrics collection"
        - name: "Grafana"
          for: "Visualization"
      
      metrics:
        - "CPU usage"
        - "Memory usage"
        - "Disk I/O"
        - "Network traffic"
    
    application:
      tools:
        - name: "Sentry"
          for: "Error tracking"
        - name: "New Relic"
          for: "APM"
      
      custom_metrics:
        - name: "documents_processed"
          type: "counter"
          labels: ["document_type", "status"]
        
        - name: "search_latency"
          type: "histogram"
          buckets: [0.1, 0.5, 1.0, 2.0, 5.0]
    
    logging:
      format: "JSON"
      levels:
        production: "INFO"
        staging: "DEBUG"
      
      retention:
        hot: "7 days"
        warm: "30 days"
        cold: "1 year"
      
      tools:
        - name: "ELK Stack"
          components:
            - "Elasticsearch"
            - "Logstash"
            - "Kibana"
    
    alerting:
      channels:
        - type: "email"
          for: ["critical", "warning"]
        - type: "Slack"
          for: ["all"]
        - type: "PagerDuty"
          for: ["critical"]
      
      rules:
        - name: "High Error Rate"
          condition: "error_rate > 5%"
          duration: "5 minutes"
          severity: "critical"
        
        - name: "API Latency"
          condition: "p95_latency > 5s"
          duration: "10 minutes"
          severity: "warning"

# 10. 위험 관리
risk_management:
  technical_risks:
    - id: "R001"
      description: "OpenAI API 의존성"
      probability: "medium"
      impact: "high"
      mitigation:
        - "로컬 임베딩 모델 백업 준비"
        - "여러 임베딩 서비스 provider 지원"
      owner: "tech-lead"
    
    - id: "R002"
      description: "대용량 파일 처리 성능"
      probability: "high"
      impact: "medium"
      mitigation:
        - "스트리밍 처리 구현"
        - "백그라운드 작업 큐 도입"
      owner: "backend-team"
  
  business_risks:
    - id: "R003"
      description: "예산 초과"
      probability: "medium"
      impact: "high"
      mitigation:
        - "주간 비용 모니터링"
        - "자동 비용 알림 설정"
      owner: "project-manager"

# 11. 승인 및 변경 관리
governance:
  approvals:
    - role: "Product Owner"
      name: "홍길동"
      date: "2024-01-01"
      status: "approved"
    
    - role: "Technical Lead"
      name: "김철수"
      date: "2024-01-02"
      status: "approved"
  
  change_management:
    process:
      - step: "Change Request"
        responsible: "Anyone"
        template: "change_request_form.yaml"
      
      - step: "Impact Analysis"
        responsible: "Tech Lead"
        sla: "2 business days"
      
      - step: "Approval"
        responsible: "Change Advisory Board"
        sla: "5 business days"
      
      - step: "Implementation"
        responsible: "Development Team"
    
    change_log:
      - id: "CHG001"
        date: "2024-01-15"
        type: "feature"
        description: "검색 API 응답 형식 변경"
        requestor: "frontend-team"
        status: "approved"
        impact: "medium"

# 12. 용어집
glossary:
  - term: "Embedding"
    definition: "텍스트를 고차원 벡터로 변환한 표현"
    context: "머신러닝"
  
  - term: "Chunking"
    definition: "긴 텍스트를 의미 있는 작은 단위로 분할하는 과정"
    context: "텍스트 처리"
  
  - term: "Vector Store"
    definition: "벡터 데이터를 효율적으로 저장하고 검색하는 데이터베이스"
    context: "데이터베이스"

# 13. 참조 문서
references:
  internal_docs:
    - title: "시스템 아키텍처 설계서"
      version: "2.0"
      location: "docs/architecture.md"
      last_updated: "2024-01-01"
    
    - title: "API 설계 가이드"
      version: "1.5"
      location: "docs/api-guide.md"
      last_updated: "2023-12-15"
  
  external_docs:
    - title: "FastAPI Documentation"
      url: "https://fastapi.tiangolo.com/"
      relevant_sections:
        - "Async Support"
        - "Dependency Injection"
    
    - title: "OpenAI API Reference"
      url: "https://platform.openai.com/docs/api-reference"
      relevant_sections:
        - "Embeddings"
        - "Rate Limits"

# 14. 부록
appendix:
  diagrams:
    - name: "System Architecture"
      type: "mermaid"
      location: "diagrams/system-architecture.mmd"
    
    - name: "Data Flow"
      type: "plantuml"
      location: "diagrams/data-flow.puml"
  
  mockups:
    - name: "Upload Page"
      type: "figma"
      url: "https://figma.com/file/..."
    
    - name: "Search Interface"
      type: "image"
      location: "mockups/search-ui.png"
  
  sample_data:
    - name: "API Request Examples"
      location: "examples/api-requests.json"
    
    - name: "Test Documents"
      location: "test-data/documents/"
