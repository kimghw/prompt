# 프로젝트 아키텍쳐 구성 지침
## 가이드 기본 원칙
- 오케스트레이터 패턴 적용하여 호출순서는 오케스트레이터에서만
- 프로젝트 구현과정과 프로덕션 과정을 분리
- 유즈케이스 기반 모듈로 구성하되 모듈간의 낮은 의조넝 유지하며 필요한 경우 모듈의 하위 모듈을 구성
- 과도한 추상화는 가독성을 낮추고 복잡성을 증가 시키므로 사용자가 요구 사항이 있지 않으면 적용하지 않음
- 단일 클래스의 기능은 줄이고 필요하면 디자인 패턴으로 구현

## 유지보수 관련 팁
- 클라스나 함수가 과도하게 길어지면 분할(함수-파일-패키지)
- 의존성 역전 규칙 적용
- OpenTelemetry Trace로 체인 가시화
- 설정 파일은 .env 와 .env.{module] 으로 설정 폴더에서 관리

## 명명 규칙
- 모듈 내부의 파일/클래/함수는 첨두에 모듈명을 기입할 것, 다만 4글자로 제한
- 함수는 포함된 클래스 명을 모듈네임 이어 붙일 것 {모듈네임 4자}_{클래스 네임 4자}_함수 이름



### 프로덕션 과정
- 프로젝트 계획단계에서는 추상화를 사용하지 않고 프로덕션 계획에서 추상화를 고려
- 공통화가 필요한 경우 infra로 승급
- config 서버
- 베이스 클래스 추출


## 프로젝트 아키텍쳐 구조
- 컴포짓 유즈케이스/도메인 별 패키지/메인모듈 구성
- 아토믹 유즈케이스는 모듈 내의 클래스로 구성
- 공통인프라에/코어에는 외부DB 및 전역설정 관리 , 컨테이너 관리(실행, 재시작, 설정) 사용하고 각모듈이 세부 사항을 관리
- 공통모듈의 수정이 다른 모듈에 사이드이펙트를 주지 않아야 함

## 모듈
- 메인모듈은 비즈니스플로우(오케스트레이터), 데이터 스키마, __init__ , 을 각 메인 모듈에 구성
- 모듈간의 의존은 최소화 그리고 단방향으로만 유지
