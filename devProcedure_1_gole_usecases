# 유즈케이스 작성 가이드 v2.0

## 1. 목표 설정 및 정의

### 1.1 목표 설정 프레임워크
#### 목표 구성 요소
- **비즈니스 목표**: 해결하고자 하는 핵심 문제
- **기술적 목표**: 구현을 통해 달성할 기술적 성과
- **정량적 지표**: 측정 가능한 성공 기준

#### 성공 기준 템플릿
```yaml
성능 지표:
  - 응답시간: [목표값] (예: P95 < 200ms)
  - 처리량: [목표값] (예: > 1000 TPS)
  - 가용성: [목표값] (예: 99.9% uptime)

품질 지표:
  - 정확도: [목표값] (예: > 95%)
  - 에러율: [목표값] (예: < 0.1%)
  - 사용자 만족도: [목표값] (예: NPS > 50)

운영 지표:
  - 배포 주기: [목표값] (예: 주 2회)
  - 장애 복구시간: [목표값] (예: < 30분)
  - 운영 자동화율: [목표값] (예: > 80%)
```

### 1.2 요구사항 정의

#### 기능 요구사항 분류
```yaml
핵심 기능 (Core):
  - 시스템의 주요 목적을 달성하는 필수 기능
  - 사용자가 직접적으로 상호작용하는 기능

지원 기능 (Supporting):
  - 핵심 기능을 보조하는 부가 기능
  - 관리, 모니터링, 분석 등

인프라 기능 (Infrastructure):
  - 시스템 운영에 필요한 기반 기능
  - 로깅, 보안, 백업 등
```

#### 비기능 요구사항 체크리스트
- [ ] **성능**: 응답시간, 처리량, 리소스 사용률
- [ ] **확장성**: 수평/수직 확장 전략
- [ ] **보안**: 인증/인가, 암호화, 감사
- [ ] **신뢰성**: 장애 복구, 데이터 무결성
- [ ] **사용성**: UI/UX, 접근성, 다국어
- [ ] **호환성**: 브라우저, OS, API 버전
- [ ] **유지보수성**: 모니터링, 로깅, 디버깅

## 2. 유즈케이스 분류 및 작성 기준

### 2.1 유즈케이스 분류 체계

#### Atomic 유즈케이스 판단 기준
```yaml
필수 조건:
  1. 단일 비즈니스 트랜잭션: 
     - 하나의 완결된 비즈니스 작업 단위
     - 부분 실행 불가 (all or nothing)
  
  2. 독립적 실행 가능:
     - 다른 유즈케이스에 의존하지 않음
     - 자체적으로 의미있는 결과 생성
  
  3. 명확한 시작과 종료:
     - 트리거 조건이 명확
     - 완료 상태가 정의됨

복잡도 판단:
  - 3개 이상의 주요 단계 포함
  - 2개 이상의 외부 시스템 연동
  - 복잡한 비즈니스 규칙 포함
  - 트랜잭션 관리 필요
```

#### Composite 유즈케이스 설계 원칙
```yaml
구성 원칙:
  1. 오케스트레이션:
     - Atomic UC들의 실행 순서 정의
     - 조건부 분기 및 병렬 처리
  
  2. 트랜잭션 경계:
     - 전체 트랜잭션 vs 개별 트랜잭션
     - 보상 트랜잭션 (Saga Pattern)
  
  3. 에러 전파:
     - 부분 실패 처리 전략
     - 롤백 vs 부분 성공 허용
```

### 2.2 유즈케이스 작성 템플릿

#### 기본 정보 섹션
```markdown
## UC-[ID]: [유즈케이스 명]

### 개요
- **목적**: [비즈니스 가치 및 목표]
- **범위**: [포함/제외 사항]
- **레벨**: [Atomic/Composite]
- **우선순위**: [P0/P1/P2]
- **예상 빈도**: [일/주/월 단위 실행 횟수]

### 이해관계자
- **주 액터**: [직접 상호작용하는 사용자/시스템]
- **보조 액터**: [간접적으로 관여하는 대상]
- **관심사**: [각 이해관계자의 주요 관심사]
```

#### 상세 흐름 섹션
```markdown
### 시나리오

#### 사전 조건
- [ ] [실행 전 만족해야 할 조건 1]
- [ ] [실행 전 만족해야 할 조건 2]

#### 메인 플로우
1. [액터]가 [동작]을 수행한다
2. 시스템은 [검증]을 수행한다
   - 검증 규칙: [상세 규칙]
3. 시스템은 [처리]를 수행한다
4. 시스템은 [결과]를 반환한다

#### 대안 플로우
- **A1** (2단계): [조건]인 경우
  - A1.1: [대안 처리]
  - A1.2: 3단계로 복귀

#### 예외 플로우
- **E1** (2단계): [예외 상황]
  - E1.1: [에러 처리]
  - E1.2: 유즈케이스 종료

#### 사후 조건
- [ ] [성공 시 보장되는 상태 1]
- [ ] [성공 시 보장되는 상태 2]
```

#### 기술 명세 섹션
```markdown
### 인터페이스 정의

#### 입력 데이터
```json
{
  "field1": "string, required",
  "field2": "number, optional, range: 1-100",
  "field3": {
    "nested1": "string",
    "nested2": "array"
  }
}
```

#### 출력 데이터
```json
{
  "status": "success|failure",
  "data": {},
  "error": {
    "code": "string",
    "message": "string"
  }
}
```

#### API 엔드포인트
- **Method**: POST
- **Path**: /api/v1/[resource]
- **Auth**: Bearer Token
- **Rate Limit**: 100 req/min

### 비즈니스 규칙
1. **BR-01**: [규칙 설명]
   - 조건: [적용 조건]
   - 동작: [수행 동작]

2. **BR-02**: [규칙 설명]
```

## 3. 품질 기준 및 검증

### 3.1 유즈케이스 품질 체크리스트
- [ ] **완전성**: 모든 시나리오가 포함되었는가?
- [ ] **일관성**: 용어와 형식이 일관되는가?
- [ ] **추적가능성**: 요구사항과 연결되는가?
- [ ] **테스트가능성**: 검증 가능한 조건인가?
- [ ] **구현가능성**: 기술적으로 실현 가능한가?

### 3.2 검토 기준
```yaml
문서 검토:
  - 이해관계자 리뷰
  - 기술팀 타당성 검토
  - 보안팀 위험 평가

구현 검증:
  - 단위 테스트 커버리지 > 80%
  - 통합 테스트 시나리오 작성
  - 성능 테스트 기준 충족
```

## 4. 유즈케이스 관리

### 4.1 버전 관리
```yaml
버전 규칙:
  - Major: 비즈니스 로직 주요 변경
  - Minor: 기능 추가/개선
  - Patch: 버그 수정/문서 개선

변경 이력:
  - 날짜: [YYYY-MM-DD]
  - 버전: [X.Y.Z]
  - 변경자: [이름]
  - 변경사항: [상세 내용]
```

### 4.2 의존성 관리
```yaml
의존성 매트릭스:
  UC-01:
    - 선행: []
    - 후행: [UC-02, UC-03]
    - 공유자원: [DB-1, API-1]
  
  UC-02:
    - 선행: [UC-01]
    - 후행: [UC-04]
    - 공유자원: [DB-1, Cache-1]
```

## 5. 실무 적용 가이드

### 5.1 단계별 접근법
1. **초기 분석** (1-2일)
   - 비즈니스 요구사항 수집
   - 주요 시나리오 식별
   - 우선순위 결정

2. **상세 설계** (3-5일)
   - 유즈케이스 상세 작성
   - 기술 검토 및 피드백
   - 최종 승인

3. **구현 연계** (지속적)
   - 개발팀 인수인계
   - 진행상황 추적
   - 변경사항 반영

### 5.2 협업 프로세스
```mermaid
graph LR
    A[비즈니스 분석가] -->|요구사항| B[유즈케이스 작성]
    B -->|초안| C[이해관계자 검토]
    C -->|피드백| B
    C -->|승인| D[개발팀 전달]
    D -->|구현| E[테스트/검증]
    E -->|이슈| B
```

### 5.3 도구 및 템플릿
- **문서 도구**: Confluence, Notion, Google Docs
- **모델링 도구**: draw.io, PlantUML, Mermaid
- **협업 도구**: Jira, Trello, Asana
- **버전 관리**: Git, SharePoint
