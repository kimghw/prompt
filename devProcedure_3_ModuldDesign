
### 3 시나리오/모듈별 설계 순서 및 고려사항
1. **모듈 독립성 보장**
   - 인터페이스 설계 원칙 준수
   - 데이터 교환 표준(불변, 완결적, 버전 관리, 표준 포맷)
2. **모듈 정의 및 책임할당**  
   - 유즈케이스 분석을 통한 모듈 도출
   - 모듈의 핵심 책임 정의 및 모듈 간 경계 설정
3. **이벤트 및 메시지 정의**  
이벤트 설계 원칙:
  멱등성(Idempotency):
    - 동일 이벤트 중복 처리 대응
    - 이벤트 ID를 통한 중복 제거
  
  순서 보장:
    - 이벤트 순서가 중요한 경우 파티션 키 설정
    - Out-of-order 이벤트 처리 전략
  
  이벤트 크기:
    - 메시지 브로커의 크기 제한 확인
    - Large payload 처리 전략 (S3 reference 등)
  
  보안(미선택):
    - 민감 정보 암호화
    - 이벤트 접근 권한 관리

4. **API인터페이스 설계**  
API 버전 관리:
  - URL 버전: /api/v1/, /api/v2/
  - Header 버전: Accept-Version: 1.0
  - 하위 호환성 유지 기간
  
Rate Limiting(미선택):
  - API별 제한 정책
  - 사용자/IP별 제한
  - Throttling 응답 처리
  
보안(미선택):
  - 인증/인가 메커니즘
  - CORS 정책
  - Input validation
  
문서화:
  - OpenAPI/Swagger 스펙
  - 예제 코드
  - 에러 코드 목록

5. **DTO(Data Transfer Object) 설계**  
직렬화/역직렬화:
  - JSON/XML/Protobuf 선택
  - Null 값 처리 정책
  - 날짜/시간 포맷 표준화
  
검증(Validation):
  - 필수 필드 검증
  - 데이터 타입 검증
  - 비즈니스 규칙 검증
  
버전 관리:
  - 필드 추가/삭제 정책
  - Default 값 설정
  - Deprecated 필드 관리
6. **도메인 모델 정의**
불변성(Immutability):
  - 값 객체는 불변으로 설계
  - 엔티티의 상태 변경 추적
  
동시성:
  - 낙관적/비관적 잠금 전략
  - 버전 관리 (Optimistic Locking)
  
집계(Aggregate):
  - 트랜잭션 경계 설정
  - 집계 루트 식별
  
도메인 이벤트:
  - 상태 변경 시 이벤트 발행
  - 이벤트 소싱 고려
7. **데이터베이스 스키마 설계**
성능 최적화:
  - 인덱스 전략
  - 파티셔닝 계획
  - 쿼리 최적화
  
확장성:
  - 샤딩 전략
  - Read replica 활용
  - 캐싱 레이어
  
데이터 무결성:
  - 외래 키 제약
  - Check 제약
  - Trigger 사용 최소화
  
마이그레이션:
  - 스키마 버전 관리
  - 롤백 계획
  - Zero-downtime 전략
8. **저장소 인터페이스 정의**
9. **유즈케이스 구현 설계**
트랜잭션 관리:
  - 트랜잭션 범위 최소화
  - 분산 트랜잭션 회피
  - Saga 패턴 적용
  
성능:
  - 비동기 처리 활용
  - 배치 처리 고려
  - 캐싱 전략
  
테스트 용이성:
  - 의존성 주입
  - Mock 객체 활용
  - 테스트 데이터 관리
10. **에러 처리 전략 수립**
11. **모듈 통합 포인트 정의**
12. **설정 및 환경 구성**
13. ** 설계 검증 체크리스트, 설계문서 작성**

## 모듈 설계 문서

### 1. 개요
- 모듈 목적
- 주요 기능
- 제약사항

### 2. 아키텍처
- 컴포넌트 다이어그램
- 시퀀스 다이어그램
- 데이터 흐름도

### 3. 인터페이스
- API 명세
- 이벤트 스키마
- 데이터 모델

### 4. 구현 가이드
- 개발 환경 설정
- 코딩 컨벤션
- 테스트 전략

## 설계 순서 요약
graph TD
    A[1. 모듈 정의] --> B[2. 관계 분석]
    B --> C[3. 이벤트 정의]
    C --> D[4. API 설계]
    D --> E[5. DTO 설계]
    E --> F[6. 도메인 모델]
    F --> G[7. DB 스키마]
    G --> H[8. 저장소 인터페이스]
    H --> I[9. 유즈케이스 구현]
    I --> J[10. 에러 처리]
    J --> K[11. 통합 포인트]
    K --> L[12. 환경 구성]
    L --> M[13. 설계 검증]
    M --> N[14. 문서화]

### 4 디자인 패턴
1. **유즈케이스**
   - 
2. **유즈케이스에 포함되지 않는 기능**
1. **외부 API, 메시지 큐 및 외부 데이터베이스**
  - 외부 API는 Port/Adater 패턴 구현, 도메인 엔티티 간 상호작용 또는 상태 변화를 명확히 표현
  - 여러 입력 채널을 고려하여 Inbound Port를 두고 어댑터 적용
  - 메시지큐, 외부 API 호출등을 고려하여 Outbound Port를 두고 어댑터 적용 
4. **다수 구현체 공존**
   - 동시 다른 모델 운용 하거나 교체하는 경우 Port/Adapter 패턴 구현
5. **런타임 시 모델 선택**
   - DI 주입 또는 Factory/Strategy + 여러 Adapter
6. ** 단순 CRUD, 단순조회, 단순기능(형변환, 필터 등등)
   - 라우터에서 곧바로 호출(Port, Usecase 구현 필요 없음)
