에이전트를 사용하여 fastapi를 개발 시 적용 규칙

1. 소프트웨어 아키텍쳐(얇은 어댑터 구조)
 1.1 핵심 로직을 한 곳에 두고 여러 진입점을 얇은 래퍼로만 감싸서 외부(DB, API, UI 등)와의 입쳘력 파트를 "포트/어댑터'로 얇게 구성
 1.2 CORE, CLI, API/ROUTER 를 구조를 가지마 비즈니스 로직은 오직 CORE에 포함
 1.3 엔티티와 유지케이스등 핵심 로직을 완전히 독립시키고 외부 인터페이스는 고정된 규약에 맞춰 얇게 구현
     - 비즈니스 코어는 유저의 요구사항인 기능을 의미
     - 메인코어(비즈니스 코어), CLI, API 는 동일한 시크니처를 갖어야 함

. 디자인 패턴
.1 데이터베이스 세션 등은 의존성 주입 방식 고려
.2 비동기/동기 구조 : 코어로직, CLI, fastapi 에도 동일하게 구현
. 데이터모델/스키마
.1 입출력
 - Core 반환값 : Pydantic 모델
 - CLI 반환값 : json
 - API 입출력 : response_mode()
.2 openapi
. 로그 및 예외 처리

. 네이밍 컨벤션
 .1 코어 메서드, CLI 커맨드 이름, API 예외 포인트 유사 또는 동일하게 구현
